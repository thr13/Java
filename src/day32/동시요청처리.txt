<서버의 동시 요청 처리>
일반적으로 서버는 다수의 클라이언트와 통신한다
서버는 클라이언트들에게 동시에 요청을 받아서 처리하고, 처리결과를 개별 클라이언트로 보내줘야 한다

연결수락 및 요청처리 , 요청내용받기 및 요청처리 등 이런 방식은 클라이언트 요청 처리 시간이 길어질수록 다음 클라이언트의 요청 처리 작업이 지연 될 수 밖에 없는 구조다
따라서 accept() 와 receive() 메소드를 제외한 요청 처리 코드를 별도의 스레드에서 작업하는게 좋다

TCP 서버에서 기존의 데이터 받기/보내기 코드들을 다른 스레드로 관리하거나
UDP 서버에서 데이터를 클라이언트로 전송하는 코드들을 별도의 스레드로 처리하는 것을 의미한다

스레드로 처리할 때, 클라이언트 폭증으로 인한 서버의 과도한 스레드 생성을 방지해야한다
이는 스레드풀로 스레드를 관리하는게 더 낫다

클라이언트 요청 -> 서버에서 작업 생성 -> 스레드풀에서 작업 큐 생성 -> 각 스레드는 작업 큐에서 대기(제한된 스레드 수 관리) -> 작업 큐에서 스레드를 가져와 실행 -> 스레드의 작업 처리 -> 클라이언트에게 응답
----------------------------------------------------------------------------------------------------
<TCP EchoServer 동시 요청 처리>
기존의 EchoServer 에서 스레드 풀을 추가하여, 다수의 클라이언트 요청을 동시에 처리할 수 있다

예) 10개의 스레드 요청을 처리하는 스레드 풀 생성 코드
private static ExecutorService executorService = Executors.newFixedThreadPool(10);
