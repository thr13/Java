<스트림 요소 정렬>
중간 처리 기능으로 sort() 메소드를 이용해서 요소를 오름차순/내림차순으로 정렬할 수 있다(정렬 기본값은 오름차순이다)

sorted(): Comparable 요소를 정렬한 새 스트림 생성
sorted(Comparator<T>): Comparator 에 따라 요소를 정렬한 새 스트림 생성

스트림의 요소가 객체일 경우 그 객체가 Comparable 을 구현하고 있어야만 sorted() 메소드를 사용하여 정렬할 수 있다
만약 Comparable 을 구현하지 않을 경우 ClassCastException 오류가 발생한다
(Comparable 인터페이스는 자기 자신과 다른 객체를 비교하는 방법을 정의한 클래스 이기 때문이다
즉, Comparable 인터페이스는 클래스의 객체들이 서로 어떻게 비교되어야 하는지에 대한 "기본적인 비교 규칙" 을 제공한다는 의미)

만약 내림차순으로 정렬할경우 sorted() 메소드의 괄호 내부에 Comparator.reverseOrder() 가 반환하는 Comparator 를 매개값으로 넣어주면 된다
----------------------------------------------------------------------------------------------------
<루핑(looping)>
루핑(looping) 은 스트림에서 각 요소가 제공된 동작을 한 번씩 처리하는 것을 의미한다
루핑 메소드는 peek() 와 forEach() 가 있다

peek(Consumer<? super T>: 스트림의 각 요소에 대해 제공된 Consumer 함수를 한 번씩 적용하고 새 스트림을 반환함. peek() 메소드는 중간 연산이므로 파이프라인 연결이 가능하다(peek() 메소드 뒤에 최종 처리가 붙지 않으면 동작하지 않음)

forEach(Consumer<? super T> action): 스트림의 각 요소에 대해 제공된 Consumer 함수를 한 번씩 적용한다. forEach() 메소드는 최종 연산이므로 스트림을 소비하고 어떠한 스트림도 반환하지 않음(void)

* 매개타입인 Consumer 는 함수형 인터페이스로 추상 메소드로 void accept(T t) 를 가지고 있다
** Consumer<? super T> 를 람다식으로 표현하면 T -> {...} 또는 T -> 단일 실행문; 과 같다