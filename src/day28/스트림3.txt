<스트림 요소 정렬>
중간 처리 기능으로 sort() 메소드를 이용해서 요소를 오름차순/내림차순으로 정렬할 수 있다(정렬 기본값은 오름차순이다)

sorted(): Comparable 요소를 정렬한 새 스트림 생성
sorted(Comparator<T>): Comparator 에 따라 요소를 정렬한 새 스트림 생성

스트림의 요소가 객체일 경우 그 객체가 Comparable 을 구현하고 있어야만 sorted() 메소드를 사용하여 정렬할 수 있다
만약 Comparable 을 구현하지 않을 경우 ClassCastException 오류가 발생한다
(Comparable 인터페이스는 자기 자신과 다른 객체를 비교하는 방법을 정의한 클래스 이기 때문이다
즉, Comparable 인터페이스는 클래스의 객체들이 서로 어떻게 비교되어야 하는지에 대한 "기본적인 비교 규칙" 을 제공한다는 의미)

만약 내림차순으로 정렬할경우 sorted() 메소드의 괄호 내부에 Comparator.reverseOrder() 가 반환하는 Comparator 를 매개값으로 넣어주면 된다
----------------------------------------------------------------------------------------------------
<루핑(looping)>
루핑(looping) 은 스트림에서 각 요소가 제공된 동작을 한 번씩 처리하는 것을 의미한다
루핑 메소드는 peek() 와 forEach() 가 있다

peek(Consumer<? super T>: 스트림의 각 요소에 대해 제공된 Consumer 함수를 한 번씩 적용하고 새 스트림을 반환함. peek() 메소드는 중간 연산이므로 파이프라인 연결이 가능하다(peek() 메소드 뒤에 최종 처리가 붙지 않으면 동작하지 않음)

forEach(Consumer<? super T> action): 스트림의 각 요소에 대해 제공된 Consumer 함수를 한 번씩 적용한다. forEach() 메소드는 최종 연산이므로 스트림을 소비하고 어떠한 스트림도 반환하지 않음(void)

* 매개타입인 Consumer 는 함수형 인터페이스로 추상 메소드로 void accept(T t) 를 가지고 있다
** Consumer<? super T> 를 람다식으로 표현하면 T -> {...} 또는 T -> 단일 실행문; 과 같다
----------------------------------------------------------------------------------------------------
<매칭>
매칭은 요소들이 특정 조건을 만족하는지 여부를 조사하는 최종 처리 기능이다
매칭의 메소드는 allMatch(), anyMatch(), noneMatch() 메소드가 있다

allMatch(Predicate<T> predicate): 모든 요소가 만족하는지 여부를 반환함
anyMatch(Predicate<T> predicate): 최소 요소 하나가 만족하는지 여부를 반환함
noneMatch(Predicate<T> predicate): 모든 요소가 만족하지 않는지 여부를 반환함
----------------------------------------------------------------------------------------------------
<요소 집계>
집계(Aggregate)는 최종 처리 기능으로, 요소들을 가공해서 카운팅, 합계, 평균값, 최대값, 최소값 등 하나의 값으로 산출하는 것을 의미한다
즉, 대량의 데이터를 가공해서 하나의 값으로 축소하는 리덕션(Reduction) 이라고 볼 수 있다

스틑림이 제공하는 기본 집계 메소드는 아래와 같다
count(): 요소의 개수를 long 타입으로 반환
findFirst(): 첫 번째 요소를 OptionalXxx 타입으로 반환
max(Comparator<T>): 최대 요소를 Optional<T> 타입으로 반환
max(): 최대 요소를 OptionalXxx 타입으로 반환
min(Comparator<T>): 최소 요소를 Optional<T> 타입으로 반환
min(): 최소 요소를 OptionalXxx 타입으로 반환
average(): 요소들의 평균을 OptionalDouble 타입으로 반환함
sum(): 요소들의 총합을 int, long, double 등 타입으로 반환함

* OptionalXxx 클래스들은 get(), getAsXxx() 메소드를 호추랗여 최종값을 얻을 수 있다
----------------------------------------------------------------------------------------------------
<요소 집계2>
스트림은 기본 집계 메소드를 제외하고 집계 결과물을 만들 수 있는 reduce() 메소드도 제공한다

reduce(BinaryOperator<T> accumulator): Optional<T> 타입을 반환한다
reduce(T identity, BinaryOperator<T> accumulator): T 타입을 반환한다

* 매개값 BinaryOperator 는 두 개의 매개값을 바당서 하나의 값을 리턴하는 apply() 메소드를 가지고 있는 함수형 인터페이스

reduce() 메소드는 요소가 없을 경우 예외가 발생하지만 identity 매개값을 준 경우
요소가 없을 때 identity 매개값을 디폴트 값을 반환한다
----------------------------------------------------------------------------------------------------
<요소 수집>
스트림은 요소들을 필터링 또는 매핑한 후 요소들을 수집하는 최종 처리 메소드인 collect() 를 제공한다
collect() 메소드는 필요한 요소만 컬렉션에 담을 수 있고 요소들을 그룹핑한 후 집계도 할 수 있다

collect(Collector<T,A,R> collector): 필터링 또는 매핑된 요소들을 새 컬렉션에 수집하고 이 컬렉션을 리턴한다
* 매개값 Collector 는 어떤 요소를 어떤 컬렉션에 수집할 것인지를 결정함
** T 는 스트림의 요소 타입, A 는 수집 과정에서 중간 결과를 저장하는 누적자(accumulator)의 타입, R 은 요소가 저장된 컬렉션 타입이다
T 요소를 A 누적기에 R 에 저장한다는 의미

Collector 의 구현 객체는 Collectors 클래스의 정적 메소드로 얻을 수 있다

toList(): T 를 List 에 저장해서 반환함(Collector<T, ?, List<T>>)
toSet(): T 를 Set 에 저장해서 반환함(Collector<T, ?, Set<T>>)
toMap(Function<T,K> keyMapper, Function<T,U> valueMapper): T 를 K 와 U 로 매핑하여 K 를 키로 U 를 값으로 Map 에 저장하여 반환함(Collector<T, ?, Map<K,U>>)

Collector 의 A (누적기) 자리에 ? 로 되어 있는데 이것은 Collector 이 List, Set, Map 컬렉션에 요소를 저장하는 방법을 알고 있어 별도의 누적기가 필요 없기 떄문이다

Java 16 버전부터는 요소 스트림에서 List 컬렉션을 얻을 수 있다 (스트림에서 바로 toList() 메소드 사용)
예)
List<Student> maleList = totalList.stream().filter(s->s.getSex().equals("남")).toList();
----------------------------------------------------------------------------------------------------
