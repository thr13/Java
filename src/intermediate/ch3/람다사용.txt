<3.2.1 함수형 인터페이스>
람다 표현식은 함수형 인터페이스 문맥에서 사용할 수 있다

2장에서 Predicate<T> 인터페이스로 필터 메서드를 파라미터화한 것을 함수형 인터페이스라고 한다
Predicate<T> 인터페이스는 오직 하나의 추상 메서드만 지정하기 때문이다
즉, 함수형 인터페이스는 오직 하나의 추상 메서드를 지정하는 인터페이스이다
대표적인 자바 API 함수형 인터페이스는 Comparator, Runnable 등 이 있다

람다 표현식으로 함수형 인터페이스의 추상 메서드 구현을 직접 전달할 수 있으므로
전체 표현식을 함수형 인터페이스의 인스턴스로 취급할 수 있다 (기술적으로 따지면 함수형 인터페이스를 '구현한' 클래스의 인스턴스)

예) 함수형 인터페이스 Runnable 를 이용한 익명 클래스, 람다 표현식
// 람다 사용
Runnable r1 = () -> System.out.println("Hello World 1");

// 익명 클래스 사용
Runnable r2 = new Runnable() {
    public void run() {
        System.out.println("Hello World 2");
    }
};

public static void process(Runnable r) {
    r.run();
}
process(r1); // Hello World 1 출력
process(r2); // Hello World 2 출력
process(() -> System.out.println("Hello World 3")); // 직접 전달된 람다 표현식
---
<3.2.2 함수 디스크립터 function descriptor>
함수형 인터페이스의 추상 메서드 시그니처(signature)는 람다 표현식의 시그니처를 가르킨다
람다 표현식의 시그니처를 서술하는 메서드를 함수 디스크립터(function descriptor)라고 부른다
대표적인 예로 Runnable 인터페이스의 유일한 추상 메서드 run()은 인수와 반환값이 없는 void 형 이므로
Runnable 인터페이스를 인수와 반환값이 없는 시그니처로 생각할 수 있다
람다에서 함수형 인터페이스를 가르키는 표기법에서
() -> void 표기는 파라미터 리스트가 없으며 void 타입을 반환하는 함수를 의미한다
즉, 앞문장의 Runnable 인터페이스가 해당된다 그리고 람다 표현식의 시그니처 표기법은 () -> void 이므로
함수 디스크립터는 () -> void 를 의미한다(함수 디스크립터는 람다 표현식의 시그니처를 나타내는 형식적인 표기법을 의미함)

람다 표현식은 변수에 할당하거나 함수형 인터페이스를 인수로 받는 메서드로 전달할 수 있으며
함수형 인터페이스의 추상 메서드와 같은 시그니처를 갖는다

예) 직접 람다 표현식을 전달한 process 메서드
public void process(Runnable r) {
    r.run();
}
process(() -> System.out.println("This is awesome!!")); // void 타입은 표현식에 중괄호{}로 감쌀 필요가 없다

위 코드에서 () -> System.out.println("This is awesome!!") 은 인수가 없고 void 를 반환하는 람다 표현식이다
이것은 Runnable 인터페이스의 run 메서드 시그니처와 같다