<3.3.5 함수형 인터페이스 사용>
함수형 인터페이스의 추상 메서드는 람다 표현식의 시그니처를 묘사한다
그리고 함수형 인터페이스의 추상 메서드 시그니처를 함수 디스크립터(function descriptor)라고 한다
다양한 람다 표현식을 사용하려면 공통의 함수 디스크립터를 기술하는 함수형 인터페이스 집합이 필요하다

자바8 라이브러리 설계자들은 java.util.function 패키지로 여러 가지 새로운 함수형 인터페이스를 제공한다

<3.4.1 Predicate>
java.util.function.Predicate<T> 인터페이스는 test() 라는 추상 메서드를 정의하며
test() 메서드는 제네릭 형식 T 의 객체를 인수로 받아 boolean 타입으로 반환한다
제네릭 형식 T 객체를 사용하면 boolean 표현식이 필요한 상황에서 Predicate 인터페이스를 사용할 수 있다
아래 예제는 String 객체를 인수로 받는 람다를 정의한다

@FunctionalInterface
public interface Predicate<T> { // 함수형 인터페이스
    boolean test(T t);
}
public <T> List<T> filter(List<T> list, Predicate<T> p) { // 인수로 Predicate<T> 인터페이스 사용
    List<T> results = new ArrayList<>();
    for(T t: list) {
        if(p.test(t)) { // Predicate<T> 의 추상 메서드 test() 를 사용
            results.add(t);
        }
    }
    return results;
}
Predicate<String> nonEmptyStringPredicate = (String s) -> !s.isEmpty();
List<String> nonEmpty = filter(listOfStrings, nonEmptyStringPredicate);

<3.4.2 Consumer>
java.util.function.Consumer<T> 인터페이스는 제네릭 형식 T 객체를 받아서 void 를 반환하는 accept 라는 추상 메서드를 정의한다
제네릭 형식 T 형식의 객체를 인수로 받아서 어떤 동작을 수행하고 싶을 때 Consumer 인터페이스를 사용할 수 있다
예시로 Integer 리스트를 인수로 받아서 각 항목에 어떤 동작을 수행하는 forEach() 메서드를 정의할 떄 Consumer 를 활용할 수 있다
아래는 forEach 와 람다를 이용해서 리스트의 모든 항목을 출력하는 예제다

@FunctionalInterface
public interface Consumer<T> {
    void accept(T t);
}
public <T> void forEach(List<T> list, Consumer<T> c) {
    for(T t: list) {
        c.accept(t);
    }
}
forEach(
    Arrays.asList(1,2,3,4,5), (Integer i) -> System.out.println(i) // Consumer 인터페이스의 accept() 메서드를 구현하는 람다식
);

<3.4.3 Function>
java.util.function.Function<T, R> 인터페이스는 제네릭 형식 T 를 인수로 받아서 제네릭 형식 R 객체를 반환하는 추상 메서드 apply() 를 정의한다
입력을 출력으로 매핑하는 람다를 정의할 떄 Function 인터페이스를 활용할 수 있다

아래는 String 리스트를 인수로 받아 각 String 의 길이를 포함하는 Integer 리스트로 변환하는 map() 메서드를 정의하는 예제다

@FunctionalInterface
public interface Function<T, R> {
    R apply(T t);
}
public <T, R> List<R> map(List<T> list, Function<T, R> f) {
    List<R> result = new ArrayList<>();
    for(T t: list) {
        result.add(f.apply(t));
    }
    return result;
}
List<Integer> l = map(
    Arrays.asList("lambdas", "in", "action"),
    (String s) -> s.length() // Function 의 apply() 메서드를 구현하는 람다
);

<기본형 특화>
특화된 함수형 인터페이스도 있다
자바의 모든 형식은 참조형(reference type) 아니면 기본형(primitive type)에 해당한다
하지만 제네릭 파라미터에는 참조형만 사용할 수 있다(제네릭 내부 구현 제약)
자바에서는 기본형을 참조형으로 변환하는 기능(박싱 boxing, 언박싱 unboxing)을 제공한다
박싱 boxing: 기본형 -> 참조형
언박싱 unboxing: 참조형 -> 기본형
그리고 개발자의 편의성을 위해서 박싱과 언박싱이 자동으로 이뤄지는 오토박싱(autoboxing) 기능도 제공된다

아래는 기본형 int 를 참조형 Integer 로 박싱하는 코드다(오토박싱이 실행됨)
List<Integer> list = new ArrayList<>();
for(int i = 300; i < 400; i++) {
    list.add(i);
}
하지만 이런 변환 과정은 비용이 소모된다
박싱(boxing)한 값은 기본형을 감싸는 래퍼(wrapper)이고 힙(heap)에 저장된다
따라서 박싱한 값은 메모리를 더 소비하며 기본형을 가져올 때도 메모리를 탐색하는 과정이 필요하다

자바8 에서는 기본형을 입출력으로 사용하는 상황에서 오토박싱 동작을 피할 수 있도록 함수형 인터페이스가 제공된다
아래 예제에서 IntPredicate 는 1000 이라는 값을 박싱하지 않지만,
Predicate<Integer>는 1000 이라는 값을 Integer 객체로 박싱한다

public interface IntPredicate {
    boolean test(int t);
}

IntPredicate evenNumbers = (int i) -> i % 2 == 0;
evenNumbers.test(1000); // true(박싱이 발생하지 않음)

Predicate<integer> oddNumbers = (Integer i) -> i % 2 != 0;
oddNumbers.test(1000); // false(박싱이 발생함)

일반적으로 특정 형식을 입력받는 함수형 인터페이스의 이름 앞에는 DoublePredicate, IntConsumer, LongBinaryOperator, IntFunction 처럼
형식명이 붙는다

<예외, 람다, 함수형 인터페이스 관계>
함수형 인터페이스는 확인된 예외를 던지는 동작을 허용하지 않는다
즉, 예외를 던지는 람다 표현식을 만들려면 확인된 예외를 선언하는 함수형 인터페이스를 직접 정의하거나
람다를 try/catch 블록으로 감싸야한다
만약 직접 함수형 인터페이스를 만들기 어려운 상황에서는 명시적으로 확인된 예외를 잡을(catch) 수 있다
Function<BufferedReader, String> f = (BufferedReader b) -> {
    try {
        return b.readLine();
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}