<ch3 람다표현식>
앞의 예제에서 동작 파라미터화를 이용해서 요구사항 변화에 대응 가능한 것을 확인했다
그리고 정의한 코드 블록을 다른 메서드로 전달하였다
정의한 코드 블록을 특정 이벤트가 발생할 때 실행하거나 알고리즘 일부로 실행되도록 설정하였다
그러므로 동작 파라미터화를 이용하면 유연하고 재사용할 수 있는 코드를 만들 수 있다

익명 클래스로 다양한 동작을 구현할 수 있지만 생각보다 코드가 깔끔하지 않다
자바8 버전에서 람다 표현식(lambda-expression)을 이용하면 깔끔한 코드르 작성할 수 있다
람다 표현식은 익명 클래스처럼 이름이 없는 함수면서 메서드를 인ㄴ수로 전달할 수 있다

<ch3.1 람다 lambda>
람다 표현식은 메서드로 전달할 수 있는 '익명함수'를 단순화 한 것이다
람다 표현식은 이름이 없지만 파라미터 리스트, 바디, 리턴 타입, 발생할 수 있는 예외 리스트를 가질 수 있다
람다의 특징:
    일반적인 메서드와 달리 이름이 없으므로 '익명'이라 표현함
    람다는 메서드처럼 특정 클래스에 종속되지 않으므로 함수라 부름
    람다 표현식을 인ㅅ구로 전달하거나 변수로 저장할 수 있다
    익명 클래스처럼 복잡하게 코드를 구현할 필요 없다

기존의 동작 파라미터 형식 코드:
Comparator<Apple> byWeight = new Comparator<Apple>() {
    public int compare(Apple a1, Apple a2) {
        return a1.getWeight().compareTo(a2.getWeight());
    }
};

람다를 이용한 코드:
Comparator<Apple> byWeight =
    (Apple a1, Apple a2) -> a1.getWeight().compareTo(a2.getWeight());

람다 표현식을 이용하면 기존 메소드 compare()의 바디를 직접 전달하는 것처럼 코드를 전달할 수 있다
람다 표현식은 람다 파라미터, 화살표, 람다 바디로 이뤄진다
람다 표현식은 표현식 스타일(expression style), 블록 스타일(block-style)로 표현할 수 있다
(파라미터) -> 표현식
(파라미터) -> { return 구문; }