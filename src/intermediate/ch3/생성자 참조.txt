<3.6.2 생성자 참조>
ClassName:new ~~ 처럼 클래스명과 new 키워드를 이용해서 기존 생성자의 참조를 만들 수 있다
이는 정적 메서드 참조를 만드는 방법과 비슷하다
예를 들어 인수가 없는 생성자인 Supplier 의 () -> Apple 과 같은 시그니처를 갖는 생성자가 있다고 가정하면
Supplier<Apple> c1 = Apple::new;
Apple a1 = c1.get(); // Supplier 의 get() 메서드를 호출해서 새로운 Apple 객체를 만들 수 있다
위 코드는 아래 코드와 같다
Supplier<Apple> c1 = () -> new Apple(); // 람다 표현식은 디폴트 생성자를 가진 Apple 객체를 만든다
Apple a1 = c1.get();

Apple(Integer weight)라는 시그니처를 가지는 생성자는 Function 인터페이스의 시그니처와 같다
Function<Integer, Apple> c2 = Apple::new; // Apple(Integer weight) 생성자 참조
Apple a2 = c2.apply(110); // Function 의 apply() 메서드에 weight 값을 인수로 호출해서 새로운 Apple 객체를 만들 수 있다
위 코드는 아래와 같다
Function<Integer, Apple> c2 = (weight) -> new Apple(weight);
Apple a2 = c2.apply(110);

예) 메서드 생성자 참조 전달 예제
List<Integer> weights = Arrays.asList(7, 3, 4, 10);
List<Apple> apples = map(weights, Apple::new); // map() 메서드로 생성자 참조 전달
public List<Apple> map(List<Integer> list, Function<Integer, Apple> f) {
    List<Apple> result = new ArrayList<>();
    for(Integer i: list) {
        result.add(f.apply(i));
    }
    return result;
}

예2) 두 인수를 갖는 생성자의 메서드 생성자 참조 예제
BiFunction<Color, Integer, Apple> c3 = Apple::new; // Apple(String color, Integer weight) 생성자 참조
Apple a3 = c3.apply(GREEN, 110); // BiFunction 의 apply() 메서드로 color 와 weight 를 인수로 제공해서 새로운 Apple 객체를 만들 수 있다

이 코드는 아래와 같다
BiFunction<Color, Integer, Apple> c3 = (color, weight) -> new Apple(color, weight);
Apple a3 = c3.apply(GREEN, 110);

메서드 생성자 참조를 이용하면 인스턴스화 하지 않고도 생성자에 접근할 수 있다!!
이는 여러 인수를 가진 복수의 생성자를 만들때 코드를 간결하게 줄일 수 있어 유용하다

예) Color(int, int, int) 처럼 인수가 3개인 생성자의 생성자 참조 사용 방법
생성자 참조 문법은 클래스명::new 이므로 Color 생성자의 참조는 Color::new 가 된다
하지만 이를 사용하려면 생성자 참조와 일치하는 시그니처를 갖는 함수형 인터페이스가 필요하다
현재 이런 시그니처를 갖는 함수형 인터페이스는 제공되지 않으므로 직접 만들어야 한다
public interface TriFunction<T, U, V, R> {
    R apply(T t, U u, V v);
}
시그니처를 갖는 함수형 인터페이스를 만들게 되면 생성자 참조를 사용할 수 있게된다
TriFunction<Integer, Integer, Integer, Color> colorFactory = Color::new;