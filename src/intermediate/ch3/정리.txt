<3.10 정리>
람다 표현식은 익명 함수의 일종이다 이름이 없고, 파라미터 리스트, 바디, 반환 형식을 가지며 예외를 던질 수 있다
람다 표현식으로 간결한 코드를 구현할 수 있다
함수형 인터페이스는 하나의 추상 메서드만 정의하는 인터페이스다
함수형 인터페이스는 기대하는 곳에서만 람다 표현식을 사용할 수 있다
람다 표현식을 이용해서 함수형 인터페이스의 추상 메서드를 즉석에서 제공할 수 있다 그리고 람다 표현식 전체가 함수형 인터페이스의 인스턴스로 취급된다
java.util.function 패키지는 Predicate<T>, Function<T, R>, Supplier<T>, Consumer<T>, BinaryOperator<T> 등 자주 사용하는 함수형 인터페이스를 제공한다
자바8 은 Predicate<T>와 Function<T, R> 같은 제네릭 함수형 인터페이스와 관련하여
박싱 동작을 피할 수 있는 IntPredicate, IntToLongFunction 등과 같은 기본형 특화 인터페이스도 제공한다
실행 어라운드 패턴(자원 할당, 자원 정리 등 코드 중간에 실행해야 하는 메서드에 꼭 필요한 코드 같은 경우)을 람다와 활용하면 유연성과 재사용성을 추가로 얻을 수 있다
람다 표현식의 기대 형식(type expected)를 대상 형식(target type)이라고 한다
메서드 참조를 이용하면 기존의 메서드 구현을 재사용하고 직접 전달할 수 있다
함수형 인터페이스는 람다 표현식을 조립할 수 있는 다양한 디폴트 메서드를 제공한다