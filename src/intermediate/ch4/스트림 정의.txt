<4.2 스트림 정의>
* 자바8 컬렉션에는 스트림을 반환하는 stream() 메서드가 추가되었다
스트림이란 '데이터 처리 연산을 지원하도록 소스에서 추출된 연속된 요소(Sequence of elements)'로 정의할 수 있다

연속된 요소:
컬렉션과 마찬가지로 스트림은 특정 요소 형식으로 이루어진 '연속된' 값 집합의 인터페이스를 제공한다
컬렉션은 자료구조 이므로 컬렉션은 시간, 공간 복잡성과 관련된 요소 저장 및 접근 연산이 주를 이룬다
반면 스트림은 filter, sorted, map 처럼 표현 계산식이 주를 이룬다
컬렉션의 '주체'는 데이터고 스트림의 주체는 '계산'이다

소스:
스트림은 컬렉션, 배열, I/O 자원 등 데이터 제공 소스로부터 데이터를 소비한다
정렬된 컬렉션으로 스트림을 생성하면 정렬이 그댈로 유지된다
리스트로 스트림을 만듦녀 스트림의 요소는 리스트의 요소와 같은 순서를 유지한다

데이터 처리 연산:
스트림은 함수형 프로그램이 언어에서 지원하는 연산과 데이터베이스와 비슷한 연산을 지원한다
(예: filter, map, sort, find 등 메소드로 데이터를 조작할 수 있다)
스트림 연산은 순차적으로 또는 병렬로 실행할 수 있다

파이프라인(PipeLining):
스트림 연산은 스트림 연산끼리 연결해 커다란 파이프라인을 구성할 수 있도록 '스트림 자신'을 반환한다
이 덕분에 게으름(laziness), 쇼트서킷(short-circuiting)같은 최적화도 얻을 수 있따
연산 파이프라인은 데이터 소스에 적용하는 데이터베이스 질의와 비슷하다

내부반복:
반복자(Iterator)를 이용해서 명시적으로 반복하는 컬렉션과 달리
스트림은 내부 반복자를 지원한다
---
예) 스트림 예제 코드
List<String> threeHighCaloricDishNames = menu.stream()
                .filter(dish -> dish.getCalories() > 300)
                .map(Dish::getName) // 파이프라인 연산(요리명 추출)
                .limit(3)
                .collect(toList());
        System.out.println(threeHighCaloricDishNames);
요리 리스트를 포함하는 menu 에서 stream() 메서드를 호출해서 스트림을 얻었다
여기서 '데이터소스(data source)'는 요리 리스트(menu) 이다
데이터 소스는 '연속된 요소'를 스트림에 제공한다
다음으로 스트림에 filter, map, limit, collect 로 이어지는 일련의 '데이터 처리 연산'을 적용한다
collect() 메소드를 제외한 모든 연산은 서로 '파이프라인'을 형성할 수 있도록 스트림을 반환한다
파이프라인은 소스에 적용하는 질의 같은 존재다
마지막으로 collect() 연산으로 파이프라인을 처리해서 결과를 반환한다(collect 는 스트림이 아니라 List 를 반환함)
마지막의 collect() 를 호출하기 전까지 menu 에서 아무것도 선택되지 않고 출력 결과도 없다
즉, collect() 메소드를 호출되기 전까진 메서드 호출이 저장되는 효과가 있다

filter(): 람다를 인수로 받아 스트림에서 특정 요소를 제외시킨다
map(): 람다를 이용해서 한 요소를 다른 요소로 변환하거나 정보를 추출한다
limit(): 정해진 개수 이상의 요소가 스트림에 저장되지 못하게 스트림 크기를 축소(truncate)한다
collect(): 스트림을 다른 형식으로 변환한다

스트림을 적용함으로써 "고칼로리 요리 3개를 찾아라"와 같은 선언형으로 데이터를 처리할 수 있게 되었다
스트림 라이브러리에서 필터링, 추출, 축소등 기능이 제공되므로 직접 기능을 구현할 필요가 없다
결과적으로 스트림 API 는 파이프라인을 더 최적화할 수 있는 유연성을 제공한다