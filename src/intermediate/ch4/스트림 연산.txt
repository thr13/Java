<4.4 스트림 연산>
java.util.stream.Stream 인터페이스는 많은 연산을 정의한다
스트림 인터페이스의 연산은 크게 2가지로 구분할 수 있다
시작 - [중간 연산] - [최종 연산]

List<String> threeHighCaloricDishNames = menu.stream() // menu 에서 스트림을 얻기
                .filter(dish -> dish.getCalories() > 300) // 중간 연산1
                .map(Dish::getName) // 중간 연산2
                .limit(3) // 중간 연산3
                .collect(toList()); // 스트림을 List 로 변환

위 코드에서 중간연산 filter, map, limit 는 서로 연결되어 파이프라인을 형성한다
collect 로 파이프라인을 실행한 다음 닫는다

연결할 수 있는 스트림 연산을 중간 연산(intermediate operation)이라고 하며,
스트림을 닫는 연산을 최종 연산(terminal operation)이라고 한다
---
<4.4.1 중간 연산>
filter 나 sorted 같은 중간 연산은 다른 스트림을 반환한다
따라서 여러 중간 연산을 연결해서 질의를 만들 수 있다

중간 연산의 특징은 단말 연산을 스트림 파이프라인에 실행하기 전까지 아무 연산도 수행하지 않는다!!
(즉, 게으르다(lazy))
중간 연산을 합친 다음에, 합쳐진 중간 연산을 최종 연산으로 한 번에 처리하기 때문이다

예) 람다가 처리중인 스트림 파이프라인 연산 코드
List<String> names = menu.stream()
                .filter(dish -> {
                    System.out.println("filtering:" + dish.getName());
                    return dish.getCalories() > 300;
                }) // 필터링한 요리명을 출력한다
                .map(dish -> {
                    System.out.println("mapping:" + dish.getName());
                    return dish.getName();
                }) // 추출한 요리명을 출력한다
                .limit(3)
                .collect(toList());
        System.out.println(names);

스트림의 게으른 특성 덕분에 몇 가지 최적화 효과를 얻을 수 있었다
첫째, 300칼로리가 넘는 요리는 여러 개지만 오직 처음 3개만 선택되었다
이는 limit() 연산 그리고 쇼트서킷 이라는 기법 덕분이다
둘째, filter 와 map 은 서로 다른 연산이지만 한 과정으로 병합되었다
이 기법을 루프 퓨전(loop fusion)이라고 한다
---
<4.4.2 최종 연산>
최종 연산은 스트림 파이프라인에서 결과를 도출한다
일반적으로 최종 연산에 의해 List, Integer, void 등 스트림 이외의 결과가 반환된다

예) 중간 연산과 최종 연산 예제
long = count = menu.stream()
                .filter(d -> d.getCalories() > 300)
                .distinct()
                .limit(3)
                .count();

여기서 최종 연산은 count() 이고 스트림이 아닌 long 을 반환한다
filter, distinct, limit 는 스트림을 반환하며 서로 연결할 수 있다 따라서 이들은 중간 연산이다
---
<4.4.3 스트림 이용하기>
스트림 이용 과정은 다음과 같이 3가지로 요약할 수 있다
* 질의를 수행할 (컬렉션 같은) 데이터 소스
* 스트림 파이프라인을 구성할 중간 연산 연결
* 스트림 파이프라인을 실행하고 결과를 만들 최종 연산

스트림 파이프라인 개념은 빌더 패턴(builder pattern)과 비슷하다
빌더 패턴은 호출을 연결해서 설정을 만든다 이는 스트림에서 중간 연산을 연결하는 것과 같다