<스트림>
자바 애플리케이션은 대부분 컬렉션(collections)을 만들고 처리하는 과정을 포함한다
컬렉션으로 데이터를 그룹화하고 처리할 수 있다 그래서 컬렉션은 대부분 프로그래밍 작업에 사용된다
많은 요소를 포함하는 큰 컬렉션은 어떻게 처리해야할까? 성능을 높이려면 멀티코어 아키텍처를 활용해서 병렬로 컬렉션의 요소를 처리해야한다
하지만 병렬 처리 코드를 구현하는 것은 단순 반복 처리 코드에 비해 복잡하고 어렵다 게다가 복잡한 코드는 디버깅이 어렵다
위의 문제는 스트림을 이용해서 해결할 수 있다

<4.1 스트림이란 무엇인가?>
스트림(Streams)은 자바8 API 에 새로 추가된 기능이다
스트림을 이용하면 선언형으로 컬렉션 데이터를 처리할 수 있다
또한 스트림을 이용하면 멀티스레드 코드를 구현하지 않아도 데이터를 투명하게 병렬로 처리할 수 있다

아래는 자바7 버전 코드의 일부이다
Collections.sort(lowCaloricDishes, new Comparator<Dish>() {
            public int compare(Dish dish1, Dish dish2) {
                return Integer.compare(dish1.getCalories(), dish2.getCalories());
            }
        });
여기서 lowCaloricDishes 라는 '가비지 변수'를 사용했다 (즉, lowCaloricDishes 는 컨테이너 역할만 하는 중간변수)

자바8 버전은 이런 세부 구현은 라이브러리 내에서 모두 처리한다
List<String> lowCaloricDishes = menu.stream()
                .filter(d -> d.getCalories() < 400)
                .sorted(comparing(Dish::getCalories))
                .map(Dish::getName)
                .collect(toList());
여기서 자바8 버전에서 stream() 을 parallelStream() 으로 변경하면 멀티코어 아키텍처에서 병렬로 실행할 수 있다

스트림은 선언형으로 코드를 구현할 수 있다
즉, 루프와 if 조건문 등 제어 블록을 사용해서 어떻게 동작을 구현할지 지정할 필요 없이
'400 미만의 칼로리의 요리만 선택해라' 같은 동작의 수행을 지정할 수 있다
선언형 코드와 동작 파라미터화를 활용하면 변화하는 요구사항에 쉽게 대응할 수 있다
또한 filter, sorted, map, collect 등 빌딩 블록 연산을 연결해서 복잡한 데이터 처리 파이프라인을 만들 수 있다
이런 연산을 파이프라인으로 연결하면 가독성과 명확성이 유지된다 filter() 메서드의 결과는 sorted() 메서드로
다시 sorted() 메서드 결과는 map() 메서드로 map() 메서드 결과는 collect() 메서드로 연결된다

filter() 와 같은 메서드들의 연산은 고수준 빌딩 블록(high-level building block)으로 이루어져 있으므로
특정 스레딩 모델에 제한되지 않고 자유롭게 어떤 상황에서 사용할 수 있다
(그리고 내부적으로 멀티코어 아키텍처를 최대한 투명하게 활용할 수 있게 구현되어 있다)
결과적으로 데이터 처리 과정을 병렬화화면서 스레드와 락을 걱정할 필요가 없다
---
자바8 의 스트림 API 특징:
1. 선연형: 가독성이 좋아짐
2. 조립가능: 유연성이 좋아짐
3. 병렬화: 성능이 좋아짐