<동작 파라미터화 behavior parameterization>
    - 동작 파라미터화는 아직 어떻게 실행할 것인지 결정하지 않은 코드 블록을 의미한다
예를 들어 나중에 실행될 메서드의 인수로 코드 블록을 전달할 수 있다
이러면 결과적으로 코드 블록에 따라 메소드의 동작이 파라미터화된다

즉, 동작 파라미터화는 원하는 동작을 메서드의 인수로 전달할 수 있는 것이다
동작 파라미터화를 추가하려면 코드 길이가 늘어나지만 자바8 은 람다 표현식으로 이 문제를 해결할 수 있다
---
<변화하는 요구사항 대응하기>
사과 색을 정의하는 상수 Color 가 있을때, 녹색 사과를 필터링 하는 메소드는 아래와 같다
public static List<Apple> filterGreenApples(List<Apple> inventory) {
    List<Apple> result = new ArrayList<>(); // 사과를 누적시킬 리스트
    for (Apple apple: inventory) {
        if (GREEN.equals(apple.getColor()) {
        // 녹색 사과만 선택
            result.add(apple)
        }
    }
}

if 문 내부 조건문이 녹색 사과를 선택하는데 필요한 조건이다 그런데 여기서 녹색 사과 말고 빨간 사과도 필터링 하고 싶다면,
if 문 조건을 빨간 사과로 바꾼 새로운 메서드를 만들 수 있다 그러나 이 방식은 나중에 더 다양한 색으로 필터링하는 변화에 적절하게 대응할 수 없다
이런 상황에서 다음과 같은 좋은 규칙이 있다
* 거의 비슷한 코드가 반복하거나, 존재한다면 그 코드를 추상화시켜라

만약 색을 파라미터화를 할 수 있도록 메서드에 파라미터를 추가하면 변화하는 요구사항에 좀 더 유연하게 대응할 수 있을 것이다
public static List<Apple> filterGreenApples(List<Apple> inventory, Color color) {
    List<Apple> result = new ArrayList<>(); // 사과를 누적시킬 리스트
    for (Apple apple: inventory) {
        if (color.getColor().equals(color) {
        // 이제 다양한 색상을 선택할 수 있다
            result.add(apple)
        }
    }
}

만약 기준이 색에서 무게로 변경된다면 색깔 파라미터 대신 무게 파라미터를 추가할 수 있다
public static List<Apple> filterGreenApples(List<Apple> inventory, int weight) {
    List<Apple> result = new ArrayList<>(); // 사과를 누적시킬 리스트
    for (Apple apple: inventory) {
        if (apple.getWeight() > weight) {
        // 다양한 무게에 대응 가능
            result.add(apple)
        }
    }
}

그러나 구현 코드를 자세히 보면, 목록을 검색하고 각 사과에 필터링 조건을 적용하는 코드가 대부분 중복된다는 것을 알 수 있다
이는 소프트웨어 공학의 DRY(don't repeat yourself, 같은 것을 반복하지 말 것) 원칙을 어기게 된다.
이 코드의 성능을 개선할려면 메소드 전체 구현을 고쳐야 하는데 이러면 엔지니어링적으로 비싼 대가를 치르는 것과 같다
---
<파라미터 추가가 아닌, 동작 파라미터화>
우리는 선택 조건을 다음과 같이 정할 수 있다
"사과의 어떤 속성에 기초해서 boolean 값으로 반환하는 방법이 있다" 이런 참 또는 거짓을 반환하는 함수를 프레딬케이트(Predicate) 라고 한다
프레디케이트는 선택 조건을 결정하는 인터페이스 이다
public interface ApplePredicate {
    boolean test (Apple apple);
}
그리고 이 선택 조건은 여러 버전이 존재할 수 있다
public class AppleHeavyWeightPredicate implements ApplePredicate {
    // 무거운 사과만 선택
    public boolean test(Apple apple) {
        return apple.getWeight() > 150;
    }
}

public class AppleGreenColorPredicate implements ApplePredicate {
    // 녹색 사과만 선택
    public boolean test(Apple apple) {
        return GREEN.equals(apple.getColor());
    }
}

즉, ApplePredicate 는 사과 선택 전략을 캡슐화한 것과 같다

위 조건에 따라 filter 메서드가 다르게 동작할 것이라고 예상할 수 있는데 이를 전략 디자인 패턴(strategy design pattern)이라고 부른다
전략 디자인 패턴은 각 알고리즘(전략)을 캡슐화하는 알고리즘 패밀리를 정의해둔 다음에 런타임에 알고리즘을 선택하는 기법이다
ApplePredicate 가 알고리즘 패밀리고 AppleHeavyWeightPredicate 와 AppleGreenColorPredicate 가 알고리즘(전략)이다

아래는 ApplePredicate 를 이용한 필터 메서드이다

public static List<Apple> filterApples(List<Apple> inventory, ApplePredicate p) {
    List<Apple> result = new ArrayList<>();
    for(Apple apple: inventory) {
        if(p.test(apple)) {
            result.add(apple);
        }
    }
    return result;
}

이제 150g 를 넘는 빨간 사과를 검색한다고 하면 ApplePredicate 를 적절하게 구현한 클래스만 만들면 된다
public class AppleRedAndHeavyPredicate implements ApplePredicate {
    public boolean test(Apple apple) {
    // 필터 메서드에 전략 전달, ApplePredicate 객체로 캡슐화된 boolean 표현식을 이용해서 사과를 필터링한다
        return RED.equals(apple.getColor()) && apple.getWeight() > 150;
    }
}

List<Apple> redAndHeavyApples = filterApples(inventory, new AppleRedAndHeavyPredicate());

이는 우리가 전달한 ApplePredicate 객체에 의해 filterApples() 메서드의 동작이 결정된 것이다
즉, 우리는 filterApples() 메서드의 동작을 파라미터화한 것이다

위 코드에서 가장 중요한 구현은 test 메서드이다 filterApples() 메서드의 새로운 동작을 정의하는 것이 test 메서드이기 때문이다ㅏ
test 메서드는 객체만 인수로 받으므로 test 메서드를 ApplePredicate 객체로 감싸서 전달해야 한다
test 메서드를 구현하는 객체를 이용해서, boolean 표현식 등을 전달할 수 있으므로 이는 '코드를 전달'할 수 있는 것과 다름없다