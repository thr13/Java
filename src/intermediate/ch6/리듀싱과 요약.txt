<6.2 리듀싱과 요약>
컬렉터(Stream.collect 메서드의 인수)로 스트림의 항목을 컬렉션으로 재구성할 수 있다
즉, 컬렉터로 스트림의 모든 항목을 하나의 결과로 합칠 수 있다

예) counting() 이라는 팩토리 메서드가 반환하는 컬렉터로 메뉴의 요리 수 계산 예제
long howManyDishes1 = menu.stream().collect(Collectors.counting());
또는 불필요한 과정을 생략할 수 있다
long howManyDishes2 = menu.stream().count();

<6.2.1 스트림 값에서 최댓값과 최솟값 검색>
메뉴에서 칼로리가 가장 높은 요리를 찾는다고 가정하면 Collectors.maxBy(), Collectors.minBy() 두 ㅁ메서드를 이용해서 스트림의 최대값과 최소값을 계산할 수 있다
두 컬렉터는 스트림의 요소를 비교하는데 사용할 Comparator 를 인수로 받는다

예) 칼로리로 요리를 비교하는 Comparator 를 구현한 다음, Collectors.maxBy() 로 전달하는 예제
Comparator<Dish> dishCaloriesComparator = Comparator.comparingInt(Dish::getCalories);
Optional<Dish> mostCalorieDish = menu.stream().collect(maxBy(dishCaloriesComparator));

Optional<Dish> 는 menu 가 비어있다면 그 어떤 요리도 반환되지 않을 상황(null) 을 방지하기 위해 사용하였다
자바8은 값을 포함하거나 또는 포함하지 않을 수 있는 컨테이너 Optional 을 제공한다

스트림에 있는 객체의 숫자 필드의 합계나 평균 등을 반환하는 연산에도 리듀싱 기능이 자주 사용된다
이런 연산을 요약(summarization)연산이라고 부른다

<6.2.2 요약 연산>
Collectors 클래스는 Collectors.summingInt 라는 특별한 요약 팩토리 메서드를 제공한다
summingInt 는 객체를 int 로 매핑하는 함수를 인수로 받는다
summingInt 의 인수로 전달된 함수는 int 로 매핑한 컬렉터를 반환한다
그리고 summingInt 가 collect 메서드로 전달되면 요약 연산을 수행한다

예) 메뉴 리스트의 총 칼로리 계산 예제
int totalCalories = menu.stream().collect(summingInt(Dish::getCalories));

객체를 int 로 매핑하는 함수 자리에는 람다의 메서드 참조를 이용할 수 있다
요소별로 Dish::getCalories 가 사용되고(매핑) 초기값으로 설정되어 있는 누적자에 요소별로 함수의 리턴값을 더한다

Collectors.summingLong 과 Collectors.summingDouble 메서드도 이와같은 방식으로 동작하며 각각 long, double 형식의 데이터로 요약하는 점만 다르다
이러한 단순 합계 외 평균값 계산 등 연산도 요약 기능으로 제공된다
즉, Collectors.averagingInt, averagingLong, averagingDouble 등 숫자 집합의 평균을 계산할 수 있다

종종 합계, 평균 등 두 개 이상의 연산을 한번에 수행해야 할 때도 있다 이런 상황에서는 팩토리 메서드 summarizingInt 가 반환하는 컬렉터를 사용할 수 있다
예) 하나의 요약 연산으로 메뉴에 있는 요소 수, 요리의 칼로리 합계, 평균, 최대값, 최소값 계산하기
IntSummaryStatistics menuStatistics = menu.stream().collect(summarizingInt(Dish::getCalories));

위 예제는 IntSummaryStatistics 클래스로 모든 정보가 수집된다
마찬가지로 int 뿐만아니라 long, double 에 대응 하는 summarizingLong, summarizingDouble 메서드와 관련된
LongSummaryStatistics, DoubleSummaryStatistics 클래스도 있다

<6.2.3 문자열 연결>
컬렉터에 joining() 팩토리 메서드를 이용하면, 스트림의 각 객체에 toString() 메서드를 호출해서 추출한 모든 문자열을 하나의 문자열로 연결해서 반환한다
예) 메뉴의 모든 요리명 출력하기
String shortMenu = menu.stream().map(Dish::getName).collect(joining());

joining() 메서드는 내부적으로 StringBuilder 클래스를 이용해서 문자열을 하나로 만든다
* StringBuilder 는 가변객체 이므로 문자열을 합치는데 불변객체 String 보다 효율적이다

또, Dish 클래스가 요리명을 반환하는 toString() 메서드를 포함하고 있다면 map 으로 각 요리의 이름을 추출하는 과정을 생략할 수 있다
String shortMenu = menu.stream().collect(joining());

리턴값으로 반은 문자열은 구분하기 어렵다
그러므로 연결된 두 요소 사이에 구분 문자열을 넣을 수 있도록 오버로드된 joining("구분자") 팩토리 메서드를 사용할 수 있다
String shortMenu2 = menu.stream().map(Dish::getName).collect(joining(", "));

<6.2.4 범용 리듀싱 요약 연산>
모든 컬렉터는 reducing 패곹리 메서드로 정의할 수 있다
즉, 범용 Collectors.reducing 으로도 구현할 수 있다

예) 메뉴의 모든 칼로리 합계 계산하기 - reducing() 메서드로 만들어진 컬렉터
int totalCalories = menu.stream().collect(reducing(0, Dish::getCalories, (i, j) -> i + j));

reducing()은 세 개의 인수를 받는다
첫 번째 인수는 리듀싱 연산의 시작값이거나 스트림에 인수가 없을 때 반환값이다
두 번째 인수는 요리(클래스)를 칼로리 정수(리턴값)로 변환할 때 사용한 변환 함수다
세 번째 인수는 같은 종류의 두 항목을 하나의 값으로 더하는 BinaryOperator 이다

다른 방식으로는 한 개의 인수를 가진 reducing() 을 이용해서 가장 칼로리가 높은 요리를 찾는 방법도 있다
Optional<Dish> mostCalorieDish2 = menu.stream().collect(reducing((d1, d2) -> d1.getCalories() > d2.getCalories() ? d1 : d2));

한 개의 인수를 가진 reducing 팩토리 메서드는 첫 번째 시작 요소를 인수로 받으며 자신을 그대로 반환하는 항등 함수(identity function)을 두 번째 인수로 받는 상황에 해당한다
즉, 한 개의 인수를 가진 reducing 컬렉터는 시작값이 없으므로 빈 스트림이 넘겨졌을 때 시작값이 설정되지 않은 상황이 발생한다
이를 방지하기 위해 Optional<T> 객체를 사용한다
---
<collect 와 reduce>
Stream 인터페이스의 collect 와 reduce 메서드는 같은 기능을 구현하지만 의미가 조금 다르다

예)
Stream<Integer> stream = Arrays.asList(1, 2, 3, 4, 5, 6).stream();
List<Integer> numbers = stream.reduce(
                new ArrayList<Integer>(),
                (List<Integer> l, Integer e) -> { l.add(e); return l; },
                (List<Integer> l1, List<Integer> l2) -> { l1.addAll(l2); return l1; });

위 코드에는 의미론적 문제와 실용성 문제가 발생한다
collect() 메서드는 도출할려는 결과를 누적하는 컨테이너를 바꾸도록 설계된 메서드이다
반면 reduce() 메서드는 두 값을 하나로 도출하는 '불변형 연산' 이라는 점에서 의미론적인 문제가 발생한다
위 코드에서 reduce() 메서드는 누적자로 사용된 리스트를 변환시키므로 reduce 를 잘못 활용한 예에 해당한다

여러 스레드가 동시에 같은 데이터 구조체를 수정하면 리스트 자체가 망가지므로 리듀싱 연산을 병렬로 수행할 수 없다는 문제가 발생한다
이 문제를 해결하려면 매번 새로운 리스트를 할당해야한다 이 경우 객체 할당을 반복하므로 성능이 저하된다는 문제점이 있다
가변 컨테이너 작업이면서 병렬성을 확보하려면 collect() 메서드로 리듀싱 연산을 구현하는 것이 바람직하다
---
함수형 프로그래밍(자바8의 컬렉션 프레임워크에 추가된 함수형 원칙에 기반한 새로운 API)는 하나의 연산을 다양한 방법으로 해결할 수 있음을 보여준다
그리고 스트림 인터페이스에서 직접 제공하는 메서드를 이용하는 것에 비해, 컬렉터를 이용하는 코드가 더 복잡하다는 사실도 보여준다
코드가 좀 더 복잡한 대신 재사용성과 커스터마이즈 가능성을 제공하는 높은 수준의 추상화와 일반화를 얻을 수 있다

문제를 해결할 수 있는 다양한 해결 방법을 확인한 다음, 가장 일반적으로 문제에 특화된 해결책을 고르는 것이 바람직하다