<6.3 그룹화>
데이터 집합을 하나 이상의 특성으로 분류해서 그룹화하는 연산도 데이터베이스에서 많이 수행되는 작업이다
명령형으로 그룹화를 구현할려면 복잡한 코드가 된다 그러나 자바8의 함수형을 이용하면 가독성 있는 한 줄 코드로 그룹화를 구현할 수 있다
예를들어 메뉴를 그룹화한다고 가정하면 고기를 포함하는 그룹, 생선을 포함하는 그룹, 나머지 그룹으로 메뉴를 그룹화할 수 있다

예) 팩토리 메서드 Collections.groupingBy 를 이용해서 쉽게 메뉴를 그룹화하기
Map<Dish.Type, List<Dish>> dishesByType = menu.stream().collect(groupingBy(Dish::getType));

스트림의 각 요리에서 Dish.Type 과 일치하는 모든 요리를 추출하는 함수를 컬렉터 groupingBy 로 전달했다
이 함수(Dish::getType)를 기준으로 스트림이 그룹화되므로 이를 분류 함수(classification function) 이라고 부른다

그룹화 연산의 결과로 그룹화 함수가 반환하는 key 그리고 각 key 에 대응하는 스트림의 모든 항목 리스트를 value 으로 갖는 map 이 반환된다
위의 메뉴 그룹화 예제에서 key 는 요리 종류고 value 는 해당 종류(MEAT, FISH, OTHER)에 포함되는 모든 요리다

단순한 속성 접근자 대신, 더 복잡한 분류 기준이 필요한 상황에서는 메서드 참조를 분류 함수로 사용할 수 없다
예를 들어 400 칼로리 이하를 diet 로 400 ~ 700 칼로리를 normal 로 700 칼로리 초과를 fat 요리로 분류한다고 가정하면
Dish 클래스에서 이런 연산에 필요한 메서드가 없으므로 메서드 참조를 분류 함수로 사용할 수 없다
따라서 메서드 참조 대신 람다 표현식으로 필요한 로직을 구현할 수 있다

예) 메서드 참조 대신 람다 표현식으로 복잡한 분류 기준 표현하기
Map<CaloricLevel, List<Dish>> dishesByCaloricLevel = menu.stream().collect(
                groupingBy( dish -> {
                    if (dish.getCalories() <= 400)
                        return CaloricLevel.DIET;
                    else if (dish.getCalories() <= 700)
                        return CaloricLevel.NORMAL;
                    else
                        return CaloricLevel.FAT;
                }));

<6.3.1 그룹화된 요소 조작>
요소를 그룹화 한 다음, 각 결과 그룹에 요소를 조작하는 연산이 필요하다
예를 들어 500 칼로리를 넘는 요리만 필터링을 할 경우, 그룹화 하기 전에 Predicate 로 필터를 적용해 문제를 해결할 수도 있을것이다

Map<Dish.Type, List<Dish>> caloricDishesByType = menu.stream()
                .filter(dish -> dish.getCalories() > 500)
                .collect(groupingBy(Dish::getType));

필터 Predicate 를 만족하는 FISH 종류 요리는 없으므로 map 에서 해당 키 자체가 사라지는 문제점이 발생한다
Collectors 클래스는 일바적인 분류 함수에 Collector 형식의 두 번째 인수를 갖도록 groupingBy 팩토리 메서드를 오버로드해 이 문제를 해결한다

예) 팩토리 메서드 groupingBy 내부로 (Collector 내부로) 필터 Predicate 를 이동해서 문제 해결하기
Map<Dish.Type, List<Dish>> caloricDishesByType2 = menu.stream()
                .collect(groupingBy(Dish::getType,
                        filtering(dish -> dish.getCalories() > 500, toList())
                ));

filtering() 메소드는 Collectors 클래스의 또 다른 정적 팩토리 메서드로, Predicate 를 인수로 받는다
이 Predicate 로 각 그룹의 요소와 필터링된 요소를 재그룹화 한다
최종적으로 map 에서 목록이 비어있는 FISH 항목이 추가된다

그룹화된 항목을 조작하는 다른 유용한 기능으로는 맵핑 함수를 이용해 요소를 변환하는 작업이 있다
filtering 컬렉터와 같은 이유로 Collectors 클래스는 매핑 함수와 각 항목에 적용한 함수를 모으는데
사용하는 또 다른 컬렉터를 인수로 받는 mapping() 메서드를 제공한다

예) mapping 함수를 이용해 그룹의 각 요리를 관련 이름 목록을 변환하기
Map<Dish.Type, List<String>> dishNamesByType = menu.stream()
                .collect(groupingBy(Dish::getType
                        , mapping(Dish::getName, toList())
                ));

map 에서 각 그룹은 Dish.Type 이 아닌, 문자열 리스트 이다
groupingBy 와 연계해서 세 번째 컬렉터를 사용해 일반 map 이 아닌 flatMap 변환을 수행할 수 있다

태그 목록을 가진 각 요리로 구성된 맵이 있다고 가정하면 flatMapping 컬렉터를 이용해 각 형식의 요리 태그를 간편하게 추출할 수 있다
Map<Dish.Type, Set<String>> dishNamesByType = menu.stream()
                .collect(groupingBy(Dish::getType,
                        flatMapping(dish -> dishTags.get(dish.getName()).stream(), toSet())));

각각의 요리에서 태그 리스트를 가져와야할때, 두 수준의 리스트를 한 수준으로 평면화 해야되므로 flatMap 을 수행해야 한다
flatMapping 연산 결과를 수집해서 만든 리스트가 아니라 집합으로 그룹화해 '중복 태그를 제거' 한다

<6.3.2 다수준 그룹화>
두 인수를 받는 팩토리 메서드 Collectors.groupingBy 를 이용해 항목을 다수준으로 그룹화할 수 있다
Collectors.groupingBy(분류함수, 컬렉터) 는 일반적인 분류 함수와 컬렉터를 인수로 받는다
바깥쪽 groupingBy 메서드에 내부 groupingBy(스트림의 항목을 분류할 두 번째 기준을 정의)를 전달해서 두 수준으로 스트림의 항목을 그룹화할 수 있다

예) 다수준그룹화 예시
Map<Dish.Type, Map<CaloricLevel, List<Dish>>> dishesByTypeCaloricLevel = menu.stream()
                .collect(
                        groupingBy(Dish::getType, // 바깥쪽 grouping - 첫 번째 수준의 분류 함수
                                groupingBy(dish -> { // 내부 grouping - 두 번째 수준의 분류 함수
                                    if (dish.getCalories() <= 400){
                                        return CaloricLevel.DIET;
                                    } else if (dish.getCalories() <= 700){
                                        return CaloricLevel.NORMAL;
                                    } else {
                                        return CaloricLevel.FAT;
                                    }
                                })
                        )
                );

외부 맵은 첫 번째 수준의 분류 함수에서 분류한 key 인 fish, meat, other 를 가지고
외부 맵의 value 는 두 번쨰 수준의 분류 함수의 기준 key 인 normal, diet, fat 을 가진다
최종적으로 두 수준의 맵은 첫 번째 key 와 두 번째 key 의 기준으로 부합하는 요소 리스트를 value (salmon, pizza 등)으로 갖는다
다수준 그룹화 연산은 다양한 수준으로 확장할 수 있다(n수준 그룹화 결과는 n수준 트리 구조로 표현되는 n수준 맵이 된다)

groupingBy 연산을 버킷(bucket, 양동이)으로 생각하면 쉽다
첫번쨰 groupingBy 는 각 key 의 버킷을 만든다 그리고
준비된 각각의 버킷을 서브스트림 컬렉터로 채워가기를 반복하면서 n수준 그룹화를 만든다

<6.3.3 서브그룹으로 데이터 수집>
groupingBy 로 넘겨주는 컬렉터의 형식은 제한이 없다
예) groupingBy 컬렉터에 두 번째 인수로 counting 컬렉터를 전달해서 메뉴 요리의 수를 종류별로 게산하기
Map<Dish.Type, Long> typesCount = menu.stream()
                .collect(groupingBy(Dish::getType, counting()));

분류 함수 한 개의 인수를 갖는 groupingBy(f) 는 groupingBy(f, toList()) 의 축약형이다

예) 요리의 종류를 분류하는 컬렉터를 이용해 메뉴에서 가장 높은 칼로리를 가진 요리 찾기
Map<Dish.Type, Optional<Dish>> mostCaloricDishes = menu.stream()
                .collect(
                        groupingBy(Dish::getType,
                                maxBy(comparingInt(Dish::getCalories)))
                );
위 예제는 요리의 종류를 key 로, Optional<Dish>를 value 로 갖는 Map 이 반환된다
---
팩토리 메서드 maxBy 가 생성하는 컬렉터의 결과 형식에 따라 Map 의 value 가 Optional 형식이 되는데
이는 실제로 메뉴의 요리 중 Optional.empty() 를 value 으로 갖는 요리는 존재하지 않는다
처음부터 존재하지 않은 요리의 key 는 Map 에 추가되지 않기 때문이다
groupingBy 컬렉터는 스트림의 첫 번째 요소를 찾는 이후에야 그룹화 Map 에 새로운 key 를 추가한다 (=게으른 특징을 가짐)
리듀싱 컬렉터가 반환하는 형식으로 사용하는 상황이므로 굳이 Optional 래퍼를 사용할 필요가 없다
---
<컬렉터 결과를 다른 형식에 적용하기>
마지막 그룹화 연산에서 Map 의 모든 값을 Optional 로 감쌀 필요가 없으므로 Optional 을 삭제할 수 있다
팩토리 메서드 Collectors.collectingAndThen 으로 컬렉터가 반환한 결과를 다른 형식으로 활용할 수 있다

팩토리 메서드 collectingAndThen 는 적용할 컬렉터와 변환 함수를 인수로 받아 다른 컬렉터를 반환한다
반환되는 컬렉터는 기존 컬렉터의 래퍼 역할을 하며, collect 의 마지막 과정에서 변환 함수로 자신이 반환하는 값을 매핑한다
즉, maxBy 로 만드렁진 컬렉터가 '감싸지는 컬렉터' 이고 변환 함수 Optional::get 으로 반환된 optional 에 포함된 값을 추출한다
리듀싱 컬렉터는 Optional.empty()를 반환하지 않으므로 안전한 코드다
---
<groupingBy 와 함께 사용하는 다른 컬렉터 예제>
일반적으로 스트림에서 같은 그룹으로 분류된 모든 요소에
리듀싱 작업을 수행할 때는 팩토리 메서드 groupingBy 에 두번째 인수로 전달할 컬렉터를 사용한다
예를들어 메뉴에 있는 모든 요리의 칼로리 합계를 구하려고 만든 컬렉터를 재사용할 수 있다

예) groupingBy 에 사용된 컬렉터 재사용하기
Map<Dish.Type, Integer> totalCaloriesByType = menu.stream().collect(
                groupingBy(Dish::getType,
                        summingInt(Dish::getCalories) // 재사용된 컬렉터
        ));

mapping 메서드는 '스트림의 인수를 변환하는 함수'와 '변환 함수의 결과 객체를 누적하는 컬렉터'를 인수로 받는다
mapping 은 입력 요소를 누적하기 전에 매핑 함수를 적용해서 다양한 형식의 객체를 주어진 형식의 컬렉터에 맞게 변환하는 역할을 한다

예) 각 요리 형식에 존재하는 모든 CaloricLevel 값을 출력하기
Map<Dish.Type, Set<CaloricLevel>> caloricLevelsByType =
                menu.stream().collect(
                        groupingBy(Dish::getType, mapping(dish -> {
                            if (dish.getCalories() <= 400){
                                return CaloricLevel.DIET;
                            } else if (dish.getCalories() <= 700){
                                return CaloricLevel.NORMAL;
                            } else {
                                return CaloricLevel.FAT;
                            }
                        }, toSet())
                        )
                );

mapping 메서드에 전달한 변환 함수는 Dish 를 CaloricLevel 로 매핑한다
CaloricLevel 결과 스트림은 toSet 컬렉터로 전달되면서 리스트가 아닌 집합으로 스트림의 요소가 누적된다(중복된 값은 저장되지 않음)
마지막으로 그룹화 함수로 생성된 서브스트림에 mapping 함수를 적용하면서 다음과 같은 맵 결과가 생성된다

만약 Set 의 형식을 원하는 방식으로 제어할려면 toSet 대신 toCollection 메서드를 사용해
toCollection 메서드의 인수로 메서드참조를 전달할 수 있다