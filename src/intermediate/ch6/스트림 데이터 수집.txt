<스트림 데이터 수집>
중간 연산은 한 스트림을 다른 스트림으로 변환하는 연산으로서 여러개의 중간연산을 연결할 수 있다
중간 연산은 스트림 파이프라인을 구성하며, 스트림의 요소를 소비(consume)하지 않는다
반면 최종 연산은 스트림의 요소를 소비(consume)해서 최종 결과를 도출한다
최종 연산은 파이프라인을 최적화하면서 계산 과정을 짧게 생략하기도 한다

최종 연산은 collect, reduce 뿐만 아니라 다양한 요소 누적 방식이 존재한다
요소 누적 방식은 Collector 인터페이스에 정의되어 있다
* 컬렉션(Collection), 컬렉터(Collector), collect 는 전부 다른것이므로 헷갈림에 주의!!

예를 들어 어떤 트랙재션 리스트가 있는데 이들을 액면 통화로 그룹화한다고 가정하면
자바8의 람다가 없다면 코드가 길어진다

예) 통화별로 트랜잭션을 그룹화한 코드(명령형 버전)
Map<Currency, List<Transaction>> transactionsByCurrencies = new HashMap<>(); // 그룹화한 트랜잭션을 저장할 맵을 생성한다

for (Transaction transaction: transactions) {
    Currency currency = transaction.getCurrency(); // 트랜잭션의 통화를 추출
    List<Transaction> transactionsForCurrency = transactionsByCurrencies.get(currency);

    if (transactionsByCurrency == null) { // 현재 통화를 그룹화하는 맵에 항목이 없으면 항목을 만든다
        transactionsByCurrency = new ArrayList<>();
        transactionsByCurrencies.put(currency, transactionsByCurrency);
    }
    transactionsByCurrency.add(transaction); // 같은 통화를 가진 트랜잭션 리스트에 현재 탐색 중인 트랜잭션을 추가한다
}

간단한 작업임에도 불구하고 코드가 너무 길다는 사실을 부정하기 어렵다 심지어 어렵게 구현은 했는데 이해하기 어려운 코드가 되버렸다
'통화별로 트랜잭션 리스트를 그룹화하시오'라고 간단히 표현할 수 있지만 코드가 무엇을 실행하는지 한눈에 파악하기 어렵다
Stream 에 toList 를 사용하는 대신, 더 범용적인 컬렉터 파라미터를 collect 메서드에 전달함으로써 원하는 연산을 간결하게 구현할 수 있다

예) 위 예제를 collect() 메소드로 간결하게 구현하기
Map<Currency, List<Transaction>> transactionsByCurrencies =
                transactions.stream()
                .collect(groupingBy(Transaction::getCurrency));
---
<6.1 컬렉터란?>
위 예제는 명령형 프로그래밍에 비해 함수형 프로그래밍이 간결하고 명확한지 보여준다
함수형 프로그래밍에서는 '무엇'을 원하는지 직접 명시할 수 있어서 '어떤' 방법으로 이를 얻을지 신경 쓸 필요가 없다
위 예제는 collect() 메서드의 인자로 Collector 인터페이스 구현체를 전달했다
Collector 인터페이스 구현은 스트림의 요소를 어떤 식으로 도출할지 지정한다
groupingBy()를 이용해서 각 키(통화) 버킷(bucket) 그리고 각 키 버킷에 대응하는 요소 리스트를 값으로 포함하는 맵(Map)을 만들라는 동작을 수행한다

다수준(multilevel)으로 그룹화를 수행할 떄 명령형 프로그래밍과 함수형 프로그래밍 차이점은 더욱 두드러진다
명령형 코드는 문제를 해결하는 과정에서 다중 루프와 조건문을 추가하며 코드 가독성과 유지보수성이 크게 떨어진다
반면에 함수형 프로그래밍은 필요한 컬렉터를 쉽게 추가할 수 있다

<6.1.1 고급 리듀싱 기능을 수행하는 컬렉터>
함수형 API 의 장점으로는 높은 수준의 조합성과 재사용성이 있다
collect 를 결과로 수집하는 과정을 간단하고 유연한 방식으로 정의할 수 있는점이 컬렉터의 최대 강점이다
스트림에 collect 를 호출하면 스트림의 요소에 (컬렉터로 파라미터화된)리듀싱 연산이 수행된다
즉, collect 에서는 리듀싱 연산을 이용해서 스트림의 각 요소에 방문하면서 컬렉터가 작업을 처리한다
보통 함수를 요소로 변환할 때는 컬렉터를 적용하며 최종 결과를 저장하는 자료구조에 값을 누적한다

위 예제에서는 각 트랜잭션에서 통화를 추출한 다음에 통화를 키로 사용해서 트랜잭션 자체를 결과맵에 누적
... Currency currency = transaction.getCurrency();
... transactionsByCurrencies.put(currency, transactionsByCurrency);

Collector 인터페이스의 메서드 구현방식에 따라 스트림이 어떤 리듀싱 연산을 수행할지 결정된다
Collectors 유틸리티 클래스는 자주 사용하는 컬렉터 인스턴스를 손쉽게 생성할 수 있는 정적 팩토리 메서드를 제공한다
예) Collectors 유틸리티 클래스의 정적 메서드 toList() / toList 는 스트림의 모든 요소를 리스트로 수집한다
List<Transaction> transactions = transactionStream.collect(Collectors.toList());

<6.1.2 미리 정의된 컬렉터>
미리 정의된 컬렉터 groupingBy 와 같은 Collectors 클래스에서 제공하는 팩토리 기능은 크게 3가지로 구분할 수 있다
1. 스트림 요소를 하나의 값으로 리듀스하고 요약
2. 요소 그룹화
3. 요소 분할

* 분할(partitioning)은 한 개의 인수를 받아 boolean 을 반환하는 함수 즉, Predicate 를 그룹화 함수로 사용한다