<5.2 스트림 슬라이싱>
스트림의 요소를 선택하거나 스킵하는 방법은 프레디케이트 이용, 스트림의 처음 ~ 몇 개의 요소 무시, 특정 크기로 스트림을 줄이는 방법 등이 있다

<5.2.1 프레디케이트를 이용한 슬라이싱>
자바9 버전부터 스트림의 요소를 효과적으로 선택할 수 있도록 takeWhile(), dropWhile() 메서드를 지원한다
---
<takeWhile() 활용>
예) 요리 목록 데이터
List<Dish> specialMenu = Arrays.asList(
                new Dish("seasonal fruit", true, 120, Dish.Type.OTHER),
                new Dish("prawns", false, 300, Dish.Type.FISH),
                new Dish("rice", true, 350, Dish.Type.OTHER),
                new Dish("chicken", false, 400, Dish.Type.MEAT),
                new Dish("french fries", true, 530, Dish.Type.OTHER)
        );

여기서 320 칼로리 이하의 요리를 선택하는 방법으로 filter() 메서드를 활용할 수 있다
List<Dish> filteredMenu1 = specialMenu.stream()
                .filter(dish -> dish.getCalories() < 320)
                .collect(toList());

그러나 위 리스트는 이미 칼로리 순으로 정렬되어 있기 때문에
filter() 연산을 이용하면 전체 스트림을 반복하면서 '각 요소'에 프레디케이트를 적용하게 된다
따라서 리스트가 이미 정렬되어 있다는 사실을 이용해 320 칼로리보다 크거나 같은 요리가 나왔을 떄 반복 작업을 중단할 수 있다

작은 리스트에서는 요소가 적으므로 각 요소에 프레디케이를 적용하는게 문제가 되지 않지만 아주 많은 요소를 포함하는 큰 스트림에서는 상당한 차이가 될 수 있다
이때, takeWhile() 연산을 이용하면 간단하게 처리할 수 있다
takeWhile() 를 이용하면 무한스트림을 포함하는 모든 스트림에 프레디케이트를 적용해 스트림을 슬라이스 할 수 있다

List<Dish> filteredMenu2 = specialMenu.stream()
                .takeWhile(dish -> dish.getCalories() < 320)
                .collect(toList());

* filter() 메서드는 Predicate 가 true 를 반환하면 해당 요소를 스트림에서 내보내고, false 를 반환하면 해당 요소를 버리고 다음 요소를 계속 검사함
** takeWhile() 메서드는 Predicate 가 true 를 반환하는 동안 해당 요소를 스트림에서 내보내고, false 를 처음 반환하는 순간 즉시 스트림 처리를 중단하고 이후 모든 요소를 버림(스트림 파이프라인 다음 단계로 전달하지 않음)
---
<dropWhile() 활용>
만약 320 칼로리보다 큰 요소를 탐색할려면 dropWhile() 를 이용해 작업을 완료할 수 있다
List<Dish> slicedMenu12 = specialMenu.stream()
                .dropWhile(dish -> dish.getCalories() < 320)
                .collect(toList());

dropWhile() 메서드는 takeWhile() 메서드와 정반대의 작업을 수행한다
dropWhile() 메서드는 Predicate 의 반환값이 false 가 되는 첫 번째 요소까지(해당 요소 포함) 스트림에서 버린다(작업을 중단하고 남은 요소를 반환함)
그리고 dropWhile() 메서드도 takeWhile() 메서드와 마찬가지로 무한 스트림에서도 동작한다
---
<5.2.2 스트림 축소>
스트림은 주어진 값 이하의 크기를 갖는 새 스트림을 반환하는 limit(n) 메서드를 지원한다
스트림이 정렬되어 있으면 최대 요소 n개를 반환할 수 있다

List<Dish> dishes = specialMenu.stream()
                .filter(dish -> dish.getCalories() > 300)
                .limit(3) // 최대 3개까지 반환가능
                .collect(toList());

* limit(n) 메소드는 원본 컬렉션의 순서에 영향을 받는다(순서가 보장된 컬렉션인 경우 원본 컬렉션의 순서대로 가져오고 순서가 보장되지 않은 컬렉션인 경우 무작위로 가져온다)

<5.2.3 요소 건너뛰기>
스트림은 처음 n개 요소를 제외하고 스트림을 반환하는 skip(n) 메서드를 지원한다
* n개 이하의 요소를 포함하는 스트림에 skip(n)을 호출하면 빈 스트림이 반환된다
limit(n) 메소드과 skip(n) 메소드는 상호 보완적인 연산을 수행한다

예) 300 칼로리를 초과한 처음 두 요소를 건너뛴 다음 남은 요소를 반환함
List<Dish> dishes2 = specialMenu.stream()
                .filter(dish -> dish.getCalories() > 300)
                .skip(2)
                .collect(toList());