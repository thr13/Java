<5.3 매핑>
특정 객체에서, 특정 데이터를 선택하는 작업은 데이터 처리 과정에서 자주 수행되는 연산이다
스트림 API 의 map()과 flatMap() 메서드는 특정 데이터를 선택하는 기능을 제공한다

<5.3.1 스트림의 각 요소에 함수 적용하기>
스트림은 함수를 인수로 받는 map() 메서드를 지원한다
인수로 제공된 함수는 각 요소에 적용되고 함수를 적용한 결과를 새로운 요소로 매핑된다
* 이 과정은 기존의 값을 고친다(modify) 개념보다 새로운 버전을 만든다 라는 개념에 가까우므로 변환(transforming)에 가까운 매핑(mapping)이라는 단어를 사용함

예) Dish::getName 을 map() 메서드의 인수로 전달하여 스트림의 요리명 추출
List<String> dishNames = menu.stream()
                .map(Dish::getName)
                .collect(toList());
        System.out.println(dishNames);
여기서 getName() 메소드는 문자열을 반환하므로 map() 메서드의 '출력 스트림'은 Stream<String> 형식을 갖는다

<5.3.2 스트림 평면화>
예) 리스트에서 고유 문자로 이루어진 리스트를 반환하기( ["Hello", "World"] 리스트가 있을때 결과로 ["H", "e", "l", "o", "W", "r", "d"]를 포함하는 리스트 반환)
방법으로는 리스트에 있는 각 단어를 문자로 매핑한 다음 distinct 로 중복된 문자를 필터링하기
words.stream()
    .map(word -> word.split(""))
    .distinct()
    .collect(toList());

이 코드는 map() 으로 전달한 람다(word -> word.split(""))는 각 단어의 String[](문자열 배열)을 반환하는 점이 문제이다
따라서 map() 메소드가 반환한 스트림 형식은 Stream<String[]> 이다
그러ㅓ나 우리가 원하는 것은 문자열의 스트림을 표현할 Stream<String> 이므로 실패한 사례이다
이는 flatMap() 메서드롤 이용하여 해결할 수 있다
---
<map 과 Arrays.stream 활용>
우선 배열 스트림 대신 문자열 스트림이 필요하기 때문에 문자열을 받아 스트림을 만드는 Arrays.stream() 메서드를 사용한다
String[] arrayOfWords = {"Goodbye", "World"};
Stream<String> streamOfwords = Arrays.stream(arrayOfWords);
이를 파이프라인에 적용하면
words.stream()
    .map(word -> word.split("")) // 공백을 기준으로 각 단어를 개별 문자열 배열로 변환
    .map(Arrays::stream) // 각 배열을 별도의 스트림으로 생성
    .distinct() // 중복 제거
    .collect(toList());
그러나 이것도 List<Stream<String>>이 만들어 지기 때문에 문제가 해결되지 않았다
---
<flatMap 사용>
List<String> uniqueCharacters = words.stream()
    .map(word -> word.split(""))
    .flatMap(Arrays::stream) // 생성된 스트림을 하나의 스트림으로 평면화
    .distinct()
    .collect(toList());

flatMap 은 각 배열을 스트림이 아닌 스트림의 콘텐츠로 매핑한다
map(Arrays::stream) 과 달리 flatMap 은 하나의 평면화된 스트림을 반환한다
즉, flatMap() 메서드는 스트림의 각 값을 다른 스트림으로 만든 다음에 모든 스트림을 하나의 스트림으로 연결하는 기능을 수행한다
최종적으로 List<String> 을 반환한다