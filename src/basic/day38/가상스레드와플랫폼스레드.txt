<가상 스레드>
가상 스레드(virtual thread)는 자바 21 버전 부터 사용할 수 있다
가상 스레드는 처리량이 높은, 동시 애플리케이션을 개발할 때 사용할 수 있는 경량 스레드(lightweight thread)이다
---
서버 애플리케이션에서 사용자 요청을 동시에 처리(요청별 스레드)하기 위해 스레드풀링을 사용했다
* 풀링: 제한된 개수로 스레드를 운용하는 것

스레드풀에서 초당 200개의 요청을 동시에 처리할 떄 10개의 스레드를 사용헀다면, 초당 2000개의 요청을 동시에 처리하려면 스레드풀에는 100개의 스레드가 풀링되어야 한다
(스레드 1개당 초당 20개의 요청을 처리할 수 있기 때문에, 초당 2000개를 동시에 처리하려면 100개 필요)

자바 17 버전까지 스레드는 운영체제가 제공하는 플랫폼(platform)스레드를 래핑했기 때문에 스레드와 플랫폼 스레드가 1:1로 매핑되었다
플랫폼 스레드는 비용(CPU 또는 메모리 사용량)이 많이 들기 때문에 애플리케이션은 스레드의 수를 제한해서 사용해야 했다
그러므로 초당 처리되어야 할 요청 수가 늘어나도 스레드풀의 스레드를 계속 늘릴 수 없었다

이런 단점은 자바 21 버전부터 가상 스레드가 등장하면서 해결되었다
가상 스레드는 CPU 를 효율적으로 이용하면서 동시 처리량을 확장할 수 있으므로
가상 스레드는 플랫폼 스레드와 n:1 로 매핑된다(플랫폼 스레드 하나에 다수의 가상 스레드 매핑)
그러므로 플랫폼 스레드 부족 문제를 해결할 수 있게 되었다

가상 스레드는 CPU 에서 계산을 수행하는 동안에만 플랫폼 스레드를 사용한다
가상 스데르가 블로킹 I/O 작업(파일 입출력, 네트워킹 등)을 수행할 경우, 가상 스레드는 일시 중지되지만 플랫픔 스레드는 멈추지 않고 다른 가상 스레드의 작업을 처리한다
그러므로 CPU 활용도는 최적이고 높은 동시 처리량을 가진다
* 스레드와 플랫폼 스레드는 1:1 로 매핑되고 스레드를 생성하는 것은 곧 플랫폼 스레드를 생성하는것과 같으므로 스레드를 플랫폼 스레드로 부를 수 있다
---
<가상 스레드풀 생성>
메모리가 부족하지 않다는 전제하에 가상 스레드를 무제한으로 사용할 수 있다
그러므로 스레드풀에서 최대 개수를 제한할 필요가 없다(실제로 가상 스레드풀을 생성하는 Executors 의 메소드는 최대 개수를 입력받지 않는다)

예) 플랫폼 스레드풀 생성
ExecutorService platformExecutor = Executors.newFixedThreadPool(최대개수);
예) 가상 스레드풀 생성
ExecutorService virtualExecutor = Executors.newVirtualThreadPerTaskExecutor();

가상 스레드는 플랫폼 스레드에 비해 하드웨어 자원을 적게 사용하고, 스레드 개수에 제한을 받지 않는다
그러므로 가상 스레드는 스레르풀에서 풀링되서는 안되고 작업 건수별로 새 가상 스레드를 생성해서 처리해야 한다
* 가상 스레드들이 몇 개의 플랫폼 스레드르 사용하고 있는지 개발자가 알 필요 없다
---
<가상 스레드 생성>
자바 21 버전부터 가상 스레드를 생성하는 정적 메소드 2개가 추가되었다

Thread.startVirtualThread(Runnable task): 리턴타입은 Thread
Thread.ofVirtual(): 리턴 타입은 Thread.Builder.OfVirtual

* 가상 스레드는 수명이 짧고 얕은 호출 스택(중첩된 메소드 호출수가 적음)을 가지는 작업을 처리할 때 사용하면 좋다
대표적 예시로 단일 JDBC 쿼리만 수행하거나 단일 네트워크 통신을 하는 경우가 있다
** 플랫폼 스레드는 비용이 많이 들기 때문에 수명이 길고 호출 스택이 깊은 작업을 처리할 때 권장된다
대표적 예시로 서버 애플리케이션을 24시간 구동시키는 스레드는 플랫폼 스레드여야 한다 (대신 개별 요청 처리는 가상스레드가 맡음)
*** 가상 스레드와 플랫폼 스레드 객체는 모두 Thread 타입의 객체다
---
<플랫폼 스레드 생성>
스레드를 생성하면 모두 플랫폼 스레드로 생성한다
자바 21버전부터 Thread 클래스에 ofPlatform() 정적 메소드로 플랫폼 스레드를 생성할 수 있다
Thread.ofPlatform(): 정적메소드, 리턴타입은 Thread.Builder.OfPlatform

ofPlatform() 메소드로 빌더 객체를 생성하고
람다식으로 Runnable 구현객체를 매개값으로 넣은 후
start() 메소드를 호출해 스레드를 실행할 수 있다