<요소 병렬 처리(Parallel Operation)>
요소 병렬 처리(Parallel Operation)은 멀티코어 CPU 환경에서 전체 요소를 분할해서 각 코어가 병렬적으로 처리하는 것을 의미한다
요소 병렬 처리의 목적: 작업 처리 시간 단축
JAVA 는 요소 병렬 처리를 위해 병렬 스트림을 제공함
----------------------------------------------------------------------------------------------------
멀티 스레드는 동시성(Concurrency) 또는 병렬성(Parallelism) 으로 실행된다
동시성(Concurrency)는 멀티 작업을 위해 멀티 스레드가 하나의 코어에서 번갈아 가며 실행하는 것을 의미한다
병렬성(Parallelism)은 멀티 작업을 위해 멀티 코어를 이용해 각각 작업이 병렬로 실행하는 것을 의미한다

동시성은 한 시점에 하나의 작업만 실행한다(번갈아 작업 실행은 한 시점에서 하나의 작업을 처리하는 것과같다)
병렬성은 한 시점에 여러 개의 작업을 병렬로 실행한다 그러므로 병렬성은 동시성보다 성능이 좋다
----------------------------------------------------------------------------------------------------
병렬성은 데이터 병렬성(Data Parallelism)과 작업 병렬성(Task Parallelism)으로 구분된다

데이터 병렬성(Data Parallelism): 데이터 병렬성은 전체 데이터를 분할해서 서브 데이터셋으로 만들고 이 서브 데이터셋들을 병렬 처리해서 작업을 빨리 끝내는 것을 의미한다
* JAVA 의 병렬 스트림은 데이터 병렬성을 구현한 것

작업 병렬성(Task Parallelism): 작업 병렬성은 서로 다른 작업을 병렬 처리하는 것을 의미한다
    대표적인 예로 서버 프로그램이 있다 서버는 각각의 클라이언트에서 요청한 내용을 개별 스레드에서 병렬로 처리한다
----------------------------------------------------------------------------------------------------
<포크조인 프레임워크(ForkJoin Framework)>
자바 병렬 스트림은 요소들을 병렬 처리하기 위해 포크조인 프레임워크(ForkJoin Framework)를 사용한다
포크조인 프레임워크는 포크 단계에서 전체 요소들을 서브 요소셋으로 분할하고 각 서브 요소셋을 멀티 코어에서 병렬로 처리한다
조인 단계에서 서브 결과를 결합해 최종 결과를 만들어낸다

예를들어 쿼드 코어 CPU(코어가 4개인 CPU)에서 병렬 스트림으로 요소를 처리할 경우,
먼저 포크 단계에서 스트림의 전체 요소들을 4개의 서브 요소셋으로 분할한다
그리고 각 서브 요소셋을 개별 코어에서 처리하고
조인 단계에서 작업결과를 3번의 결합 과정을 거쳐 최종 결과를 산출한다

* 병렬 처리 스트림은 포크 단계에서 요소를 순서대로 분할하지 않는다

포크조인 프레임워크는 병렬 처리를 위해 스레드풀을 사용한다
각 코어에서 서브 요소셋을 처리하는 것은 작업 스레드가 해야하므로 스레드 관리가 필요하다

포크조인 프레임워크는 ExecutorService 의 구현 객체인 ForkJoinPool 을 사용해서 작업 스레드가 관리한다
----------------------------------------------------------------------------------------------------
<병렬 스트림 사용>
자바 병렬 스트림을 이용할 경우 백그라운드에서 포크조인 프레임워크가 사용되기 떄문에 쉽게 병렬 처리를 할 수 있다
병렬 스트림은 parallelStream(), parallel() 메소드로 얻을 수 있다

parallelStream() 메소드는 컬렉션 List, Set 으로부터 병렬 스트림을 바로 리턴한다
parallel() 메소드는 기존 스트림을 병렬 처리 스트림으로 변환한다

일반적으로 일반 스트림과 병렬 스트림의 처리시간을 비교하면 병렬 스트림이 더 빠르다
----------------------------------------------------------------------------------------------------
<병렬 처리 성능>
주의: 스트림 병렬 처리가 스트림 순차 처리보다 항상 실행 성능이 좋다고 판단해선 안된다

병렬 처리에 영향을 미치는 3가지 요인이 있다

"요소의 수와 요소당 처리시간"
    - 컬렉션에 전체 요소의 수가 적고, 요소당 처리 시간이 짧으면 일반 스트림이 병렬 스트림보다 빠를 수 있다
    - 병렬 처리는 포크 및 조인 단계가 존재하고 스데르 풀 생성이 추가적인 비용(자원사용)을 발생하기 떄문
"스트림 소스의 종류"
    - ArrayList 와 배열은 인덱스로 요소를 관리하기 떄문에 포크 단계에서 요소를 쉽게 분리할 수 있다 그러므로 병렬 처리 시간이 절약된다
    - 그러나 HashSet, TreeSet 은 요소 분리가 쉽지 않고, LinkedList 도 마찬가지로 링크를 따라가야 하므로 요소 분리가 쉽지 않다 그러므로 이 소스들은 상대적으로 병렬 처리가 늦다
"코어의 수"
    - CPU 코어 수가 많으면 많을수록 병렬 스트림의 성능은 좋아진다
    - 그러나 코어의 수가 적으면 일반 스트림이 더 빠를 수 있다
    - 왜냐하면 병렬 스트림은 스레드 수가 증가하여 동시성(멀티 작업을 위해 멀티 스레드가 하나의 코어에서 번갈아 가며 실행하는 것을 의미한다)이 많이 일어나므로 오히려 늦어진다