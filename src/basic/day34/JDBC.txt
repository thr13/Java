<JDBC 개요>
JAVA 는 데이터베이스(DB)와 연결해서 데이터 입출력 작업을 할 수 있는
JDBC(Java Database Connectivity) 라이브러리를 java.sql 패키지로 제공한다
JDBC 는 데이터베이스 관리시스템(DBMS)의 종류와 상관없이 동일하게 사용할 수 있는 클래스와 인터페이스로 구성되어 있다

애플리케이션(Application) - JDBC 인터페이스(java.sql 패키지) - JDBC Driver - DBMS 프로그램(Oracle, mySQL, MariaDB, msSQL 등)
----------------------------------------------------------------------------------------------------
<JDBC 구조>
JDBC 인터페이스를 통해서 실제 DB 와 작업하는 것은 JDBC Driver 이다
JDBC Driver 는 JDBC 인터페이스로 구현한 것으로 DBMS 마다 별도로 다운받아야한다

DriverManager - Connection - Statement/PreparedStatement/CallableStatement - ResultSet

DriverManager 클래스
 - JDBC Driver 를 관리하고 DB 와 연결해서 Connection 구현체를 생성한다

Connection 인터페이스
 - Statement, PreparedStatement, CallableStatement 구현체를 생성하며, 트랜잭션(Transaction) 처리를 담당하고 DB 연결을 종료할 떄 사용한다

Statement 인터페이스
 - SQL 의 DDL, DML 명령어를 실행할 떄 사용한다. 주로 변경되지 않는 정적 SQL 문을 실행할 떄 사용한다

PreparedStatement 인터페이스
 - Statement 와 동일하게 DDL, DML 명령어를 실행할 떄 사용한다. 매개변수화된 SQL 문을 사용 할 수 있다는 점에서 Statement 와 차이점을 가지고 있다
 - 매개변수화된 SQL 문을 사용하면 편리성, 보안성이 좋으므로 Statement 보다 PreparedStatement 를 주로 사용한다

CallableStatement 인터페이스
 - DB 에 저장되어 있는 프로시저(procedure)와 함수(function)을 호출할 때 사용한다

ResultSet
 - DB 에서 가져온 데이터를 읽을 떄 사용한다
----------------------------------------------------------------------------------------------------
<JDBC-mySQL>
mySQL 을 JAVA 와 연동해서 사용할려면 별도로 설치해야한다
참고(mySQL Community Server, MySQL Workbench): https://dev.mysql.com/downloads/

mySQL Community Server 는 DBMS 프로그램 이고
mySQL Workbench 는 DB 관리용 Client Tool 이다
Connector/J 는 JDBC Driver 이다
----------------------------------------------------------------------------------------------------
<DB 연결>
클라이언트 프로그램에서 DB 서버와 연결하려면 DBMS 의 JDBC Driver 가 필요하다
그리고 연결에 필요한 정보는 아래와 같다

IP 주소는 서버 컴퓨터를 찾기 위해,
Port 번호는 DBMS 로 연결하기 위해,
DB 이름은 DBMS 에서 사용할 DB 를 찾기위해,
사용자 계정(DB 계정) 및 비밀번호는 어떤 사용자인지 인증받기 위해서 필요하다

클라이언트 프로그램을 DB 와 연결하기 위해선 JDBC Driver 를 메모리로 로딩하는 것이다
Class.forName() 메소드는 문자열로 주어진 JDBC Driver 클래스를 Build Path 에서 찾고 메모리로 로딩한다
예) Class.forName("com.mysql.cj.jdbc.Driver")

이 과정에서 JDBC Driver 클래스의 static 블록이 실행되면서
DriverManager 에 JDBC Driver 객체를 등록하게 된다
만약 Build Path 에서 JDBC Driver 클래스를 찾지 못하면 ClassNotFoundException 예외가 발생하므로 예외처리를 해야한다
DiverManager 에 JDBC Driver 가 등록되면 getConnection() 메소드로 DB 와 연결할 수 있다
예) Connection conn = DriverManager.getConnection("연결 문자열", "사용자", "비밀번호");

연결 문자열은 DBMS 마다 다른 형식을 가진다 MySQL 은 아래와 같다
예)jdbc:mysql://localhost:3306/thisisjava
인 경우 localhost 는 IP 주소, 3306 은 Port 번호, thisisjava 는 DB 이름이다

연결에 성공할 경우 getConnection() 메소드는 Connection 객체를 리턴한다
만약 연결이 실패하면 SQLException 오류가 발생하므로 예외처리를 해야한다
----------------------------------------------------------------------------------------------------