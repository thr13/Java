컬렉션 및 배열에 저장된 요소를 반복 처리하기 위해선 for 문  또는 Iterator(반복자) 를 사용헀다

Java 8 버전부터 컬렉션 및 배열의 요소를 반복 처리하는 또 다른 방법으로 스트림(Stream)을 사용할 수 있다

컬렉션들에서 존재하는 stream() 메소드를 이용하면 Stream<> 객체를 얻을 수 있다
Stream 객체는 forEach( (매개변수) -> {처리내용}) 메소드를 이용해서 컬렉션의 요소를 어떻게 처리할지를 람다식으로 제공한다
----------------------------------------------------------------------------------------------------
스트림(Stream)은 반복자(Iterator)와 비슷하지만 다음과 같은 차이점이 있다

1) 내부 반복자이므로 처리 속도가 빠르고 병렬 처리에 효율적이다
2) 람다식으로 다양한 요소 처리를 정의할 수 있다
3) 중간 처리와 최종 처리를 수행하도록 파이프 라인을 형성할 수 있다
----------------------------------------------------------------------------------------------------
<외부 반복자와 내부 반복자>
외부 반복자: for 문과 Iterator 는 컬렉션의 요소를 컬렉션 바깥쪽으로 반복해서 가져와 처리한다 이를 외부반복자라고 한다
(반복의 메커니즘과 제어 흐름이 컬렉션 객체 자체에 내장되어 있지 않고, 컬렉션 외부의 코드에서 명시적으로 관리되기 때문에 외부 반복자라고 한다)

내부 반복자: Stream 과 같이 요소 처리를 컬렉션 내부로 주입시켜서 요소를 반복 처리하는 것을 내부 반복자 라고 한다
(즉, 개발자는 수행할 작업만 정의를 하게 된다)

외부 반복자는 컬렉션의 요소를 외부로 가져오는 코드와 처리하는 코드를 모두 개발자 코드가 가지고 있어야 한다
내부 반복자는 개발자 코드에서 제공한 데이터 처리 코드(람다식)을 가지고 컬렉션 내부에서 요소를 반복 처리한다

내부 반복자는 멀티 코어 CPU 를 화룔하기 위해 요소들을 분배시켜 병렬 작업을 할 수 있다
내부 반복자는 하나씩 처리하는 순차적 외부 반복자보다 효율적으로 요소를 반복시킬 수 있다