JAVA 는 정규 표현식(Regular Expression) 을 이용해서 문자열을 검증할 수 있다

정규표현식 기호와 의미

[]  문자 집합(대괄호 안의 문자 중 하나)
[^] 부정 문자 집합(대괄호 안의 문자를 제외한 나머지 문자 중 하나)
[abc]   a, b, c 중 문자 1개를 의미
[^abc]  a, b, c 이외의 문자 1개를 의미
[a-zA-Z]    a 부터 z A 부터 Z 중 문자 1개를 의미
\   이스케이프문자(메타 문자의 특별한 의미를 없애고 리터럴 문자 그 자체로 취급) 예) \d 를 정규표현 하기위해서 \\d 를 사용
\d  숫자 1개 (정규표현식 [0-9] 와 동일한 결과를 가짐)
\D  숫자가 아닌 문자
\s  공백문자(스페이스, 탭, 줄바꿈)
\s+ 하나 이상의 공백문자와 매치
\S  공백문자가 아닌 문자
\S+ 하나 이상의 공백문자가 아닌 문자와 매치
\w  알파벳 1개 또는 숫자 1개 (정규표현식 [a-zA-Z_0-9] 와 동일한 결과를 가짐)
\w+ 하나 이상의 영문자, 숫자, 밑줄로 이뤄진 문자열과 매치
\W  단어 구성 문자가 아닌 문자
\W+ 하나 이상의 영문자, 숫자, 밑줄이 아닌 문자로 이뤄진 문자열과 매치
\.  점(.) 을 의미
.   모든 문자 중에 문자 1개를 의미(=줄바꿈 문자를 제외한 임의의 문자 1개)
?   없거나 1개 를 의미
*   없거나 1개 이상을 의미
+   1개 이상을 의미
^   문자열 시작 부분
$   문자열 끝 부분
{n} 정확히 n 개를 의미
{n,}    최소 n 개가 존재하는걸 의미
{n, m}  최소 n개 부터 최대 m개 까지 존재를 의미
a|b a 또는 b 를 의미
()  그룹핑

예1) 02-123-1234 또는 010-1234-5678 인 전화번호를 정규표현식
(02|010)-\d{3,4}-\d{4}

예2) white@naver.com 과 같은 이메일 정규표현식 (주의: \. 은 문자로서 점(.)을 의미하고 . 은 모든 문자 중 1개의 문자를 의미함)
\w+@\w+\.\w+(\.\w+)?

java.util.regex 패키지에는 Pattern 클래스가 있는데 이 클래스는 정규 표현식으로 문자열을 검증하는 .matches(정규표현식, 검증할문자열) 메서드를 제공한다
.matches() 의 결과는 boolean 타입으로 반환된다
