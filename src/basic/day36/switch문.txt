<switch 문>
switch 문은 표현값의 결과에 따라서 다른 결과물을 낼떄 사용한다

<전통적 방식>
switch(표현값) {
    case 레이블1:
        실행문1;
        [break;]
    case 레이블2:
        실행문2;
        [break;]
    default:
        실행문3;
        [break;]
}
* 대괄호 [] 는 생략가능

전통적 방식은 레이블에 리터럴(Literal, 값) 또는 상수가 주로 사용됨

<강화된 방식1 - JAVA 17 부터>
switch(표현값) {
    case 레이블1 [, 레이블2] -> {
        실행문;
        ...
    }
    ...
    default -> {
        실행문;
    }
}
* case 블록이 1개의 실행문을 가질 경우 중괄호 {} 생략가능

<강화된 방식2 - JAVA 17 부터>
타입 변수이름 = switch(표현값) {
    case 레이블1, [레이블2] -> 리턴값;
    ...
    case 레이블3, [레이블4] -> {
        실행문;
        ...
        yield 리턴값;
    }
        ...
        default -> 리턴값
};
* 리턴값은 단일값 또는 단일값은 리턴하는 연산식 및 메소드 호출 코드가 올 수 있다

셋 모두 표현값에는 정수타입, String, enum 타입의 값이 오거나 이 값들을 리턴하는 연산식 및 메소드 호출 코드가 올 수 있다
---
JAVA 17 까지는 표현값이 null 일 경우 switch 문이 NullPointerException 이 발생했지만
JAVA 21 부터 레이블에 null 을 지정해서 예외를 발생시키지 않고 null 을 처리할 수 있게 되었다
switch(object) {
    ...
    case null -> {...} // 표현값 object 가 null 일 경우
    case null, default -> {...} // 표현값 object 가 null 이거나 위의 null case 가 선택되지 않는 경우
}
---
<switch 문 패턴 매칭>
JAVA 21 부터는 switch 문의 레이블에 패턴 [가드] 를 작성해서 표현값과 매칭시킬 수 있다
패턴 [가드] 는 표현값이 객체를 참조하는 변수일 경우에만 사용할 수 있다
* 패턴: 참조 변수 선언
** 가드: when + boolean 을 리턴하는 조건식 또는 메소드 호출 코드

타입 변수 = switch(표현값) {
    case 패턴 [가드] -> 리턴값;
    case 패턴 [가드] -> {
        ...;
        yield 리턴값;
    }
    ...
    case null [, default] -> 리턴값;
    default -> 리턴값
};
---
<레이블 패턴 사용>
표현값이 참조 타입 변수일 경우, 패턴을 사용해서 타입 검사를 수행하고, 자동 타입 변환해서 패턴 변수를 초기화시킨다
패턴 변수를 블록내에서 사용할 수 있다

예)
switch(object) {
    case Integer i -> { // 패턴변수 i 사용 } // 표현값 object 가 Integer 타입인 경우 매칭(자동타입변환)
    case String s -> { // 패턴변수 s 사용 } // 표현값 object 가 String 타입인 경우 매칭(자동타입변환)
    case null, default -> { ... } // 표현값 object 가 null 이거나 위의 패턴매칭과 이외의 타입일 경우 매칭함
}

표현값은 패턴 중 하나와 반드시 매칭해야한다
만약 매칭할 패턴이 없을 경우 나머지 매칭을 위해 default 를 포함해야한다
이를 표현값과 실행문의 완전성(exhaustiveness)라고 한다
(즉, 표현값은 반드시 실행문에서 처리되어야 함)