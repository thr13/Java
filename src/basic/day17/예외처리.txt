에러(Error): JAVA 에서 응용프로그램 실행 오류가 발생하는 것을 의미함

예외(Exception): JAVA 에서 잘못된 사용 또는 코딩으로부터 발생하는 오류들

예외가 발생하면 프로그램은 종료되나 예외처리를 통해 계속 실행상태(Runtime) 을 유지할 수 있다

(일반)예외(Exception)
    - 컴파일러가 예외처리코드 여부를 검사하는 예외
실행예외(Runtime Exception)
    - 컴파일러가 에외처리코드 여부를 검사하지 않는 예외

JAVA 는 예외가 발생하면 예외 클래스로부터 객체를 생성함 -> 이 객체는 예외처리시에 사용됨 -> 모든 에러는 Throwable 를 상속받아 만들어짐 (단, 예외 클래스는 Throwable 을 상속받은 java.lang.Exception 클래스를 상속받는다)

실행예외는 Runtime Exception 과 그 자식 클래스에 해당한다
Runtime Exception 을 제외한 예외 클래스는 Exception 클래스이다 -> JAVA 는 자주 사용되는 예외 클래스를 표준 라이브러리 형태로 제공된다

예외 처리 코드(try - catch - finally)
    - Exception, Runtime Exception 이 발생했을때, 프로그램 종료를 막고 실행할 수 있도록 처리하는 코드를 예외 처리 코드 라고 한다
    - 예외 처리 코드는 try-catch-finally 블록으로 구성되는데 해당 블록은 생성자 내부와 메소드 내부에서 작성된다
    - try 블록 내부에서 예외가 발생하면 그 즉시 catch 문으로 넘어가고 catch 문 종료시 finally 로 넘어간다
    - finally 블록은 예외 발생 여부와 관련없이 항상 실행된다 ( try, catch 내부에서 return 문을 사용하더라도 finally 는 실행됨 )
    - finally 문은 항상 실행되는데 필수는 아님 (생략가능)

try 블록
    - 예외 발생 가능성이 있는 코드를 가진다 (외부 파일 접근, 네트워크 통신, 사용자 입력 처리, 데이터베이스 쿼리 실행 등)
    - try 블록은 예외가 발생했을때 프로그램이 갑자기 종료되는 것을 막고 예외를 잡아서 처리할 수 있는 보호 영역을 설정할 수 있다

catch 블록
    - 특정 예외 처리: try 블록에서 발생하는 특정 타입의 예외를 감지하고 적절한 처리를 하는 역할을 가짐
    - 예외가 발생했을때, 로그를 남기거나 사용자에게 오류 메세지를 보여주는 작업을 할 수 있다
    - 프로그램의 정상적인 흐름을 이어가는 역할을 가짐 (try 블록에서 오류를 발생하면 catch 블록에서 오류에 대한 행동을 처리하면 프로그램의 종료를 막을 수 있음)

finally 블록
    - 자원해제: 파일 스트림(FileInputStream, FileOutputStream), 데이터베이스 연결(Connection), 네트워크 소켓(Socket) 등 외부 자원을 사용후 닫는 역할이 필요한데 이 역할을 finally 블록이 맡을 수 있다
    - 상태복원: 특정 작업을 수행하기 전에 변경했던 시스템의 상태를 원래대로 되돌려야 할 때 사용됨 예를 들어 트랜잭션을 시작하기 전에 자동 커밋 설정을 껐다면 finally 블록에서 자동 커밋 설정을 다시 켤 수 있도록 설정할 수 있다