CPU 와 메모리 성능이 좋더라도 하드 디스크 입출력이 늦어지면 프로그램의 실행 성능은 하드 디스크의 처리 속도에 맞춰진다
네트워크 데이터 전송도 마찬가지로 느린 네트워크 환경이라면 컴퓨터 사양이 좋아도 통신 속도는 느릴 수 밖에 없다

이런 현상을 개선하기 위해 프로그램이 입출력 소스와 직접 작업하지 않고
프로그램이 중간에 메모리 버퍼(Buffer)와 작업함으로써 실행 성능을 조금 향상시킬 수 있다

출력 스트림의 경우 직접 하드 디스크에 데이터를 보내지 않고
메모리 버퍼(buffer)에 데이터를 보냄으로써 출력 속도를 조금 향상시킬 수 있다

버퍼는 데이터가 쌓이기를 기다렸다 꽉 차게 되면 데이터를 한꺼번에 하드 디스크로 보낸다
이는 하드 디스크의 출력 횟수를 줄여 준다

입력 스트림도 마찬가지로 버퍼를 사용하면 읽기 성능이 약간 좋아진다 (하드 디스크로부터 직접 읽는 것보다 메모리 버퍼로부터 읽는 것이 빠름)

메모리 버퍼를 제공하는 보조 스트림 목록
(바이트스트림) BufferedInputStream, BufferedOutputStream
(문자스트림) BufferedReader, BufferedWriter

보조 스트림 연결 방식은 아래와 같다
BufferedInputStream bis = new BufferedInputStream(바이트 입력 스트림);
BufferedOutputStream bos = new BufferedOutputStream(바이트 출력 스트림);

BufferedReader br = new BufferedReader(문자 입력 스트림);
BufferedWriter bw = new BufferedWriter(문자 출력 스트림);
----------------------------------------------------------------------------------------------------
* 그러나 버퍼링(버퍼에 데이터를 쌓아서 보내는 것)은 장점만이 있는게 아니다
읽기/쓰기 작업의 빈도가 매우 낮고 쓰는 데이터 양이 적은 경우 버퍼를 채우는데 시간이 오래 걸릴 수 있다
이는 곧 지연시간이 발생하고 즉시 쓰는 것 보다 약간의 성능 저하가 발생한다

또, 데이터가 생성되는 즉시 하드디스크에 기록되어야하는 실시간 시스템/로깅 시스템인 경우
버퍼링으로 인해 데이터 전송이 늦어지면 시스템 동작에 오류를 발생시킬 수 있다

만약 버퍼에 데이터가 남은 상태에서 시스템이 갑자기 다운되거나 프로그램이 비정상적으로 종료된 경우
하드 디스크에 기록되지 않은 버퍼의 데이터는 유실될 수 있다
----------------------------------------------------------------------------------------------------
문자 입력 스트림(Reader) 에 BufferedReader 를 연결하면
행 단위로 문자열을 읽는 메소드 readLine() 이 제공된다
readLine() 메소든느 파일에서 한 행씩 읽고 더 이상 읽은 행이 없을 경우 null 을 반환한다

