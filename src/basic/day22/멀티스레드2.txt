멀티 스레드를 사용할려면 우선 몇 개의 작업을 병렬로 실행할지 결정하고 각 작업별로 스레드를 생성해야한다
(대표적인 예로는 메인 스레드-프로그램시작, 스레드1-네트워킹 작업, 스레드2-드로잉 작업 ... )

자바 프로그램은 메인 스레드가 무조건 존재한다
그러므로 멀티 스레드는 메인 작업 이외에 추가적인 작업 수만큼 스레드를 생성하면 된다

자바는 작업 스레드도 객체로 관리하드로 클래스가 필요하다!!
Thread 클래스를 이용해서 직접 스레드 객체를 생성할 수도 있다
아니면 하위 클래스를 만들어서 생성할 수도 있다
----------------------------------------------------------------------
Thread 클래스는 java.lang 패키지에 있다
작업 스레드 객체를 직접 생성할 경우, Runnable 구현 객체를 매개값으로 갖는 생성자를 호출하면 된다
예) Thread thread = new Thread(Runnable target);

Runnable 은 스레드가 작업을 실행할 때 사용하는 인터페이스이다 그리고 Runnable 은 단 하나의 추상 메서드 run() 이 정의되어 있다
그러므로 구현 클래스는 run() 메소드를 오버라이드 해서, 스레드가 실행할 코드(작업)을 가지고 있어야 한다

즉, 작업을 담당하는 클래스(Runnable 의 구현체)의 예시는 아래와 같다
class 클래스이름 implements Runnable {
    @Override
    public void run() {
        //스레드가 실행할 코드
    }
}

Runnable 구현 클래스는 작업 내용을 "정의" 한 것이므로 스레드에게 "전달" 해야한다
즉, Runnable 구현 객체를 생성한 다음 Thread 생성자에 매개값으로 Runnable 구현객체를 전달하면된다

만약 명시적인 Runnable 구현 클래스를 작성 하고 싶지 않을 경우
Thread 생성자를 호출할 때, Runnable 익명 구현 객체를 생성자의 매개값으로 사용할 수 있다
----------------------------------------------------------------------
작업 스레드 객체가 생성된 경우, 스레드 객체의 start() 메소드를 통해서 작업 스레드를 실행할 수 있다

start() 메소드가 호출되면, 작업스레드는 매개값으로 전달받은 Runnable 구현 객체의 run() 메소드를 실행하면서 작업을 처리한다
작업순서는 아래와 같다
메인 스레드  -> Runnable 구현 객체 생성 -> Thread 객체 생성 -> Thread 객체의 start() 메소드 호출 -> Runnable 구현 객체의 run() 메소드 실행 -> 메인 스레드 실행

단일 코어 CPU 환경에서는 시간분할방식(여러 작업을 순차적으로 빠르게 번갈아 가며 실행)을 사용하므로 동시에 2가지 이상 작업을 처리할 수 없다
----------------------------------------------------------------------