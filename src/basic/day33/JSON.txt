<JSON Data Format>
네트웤로 전달하는 데이터가 복잡할수록 구조화된 형식이 필요하다
일반적으로 네트워크 통신에서 많이 사용되는 형식은 JSON (JavaScript Object Notation) 이다
----------------------------------------------------------------------------------------------------
<JSON 의 표기법>
1. 객체 표기
    - 속성명은 반드시 큰따옴표() 로 감싸야한다
    - 속성값으로 가능한 것들은 문자열, 숫자, true/false, 객체 {...}, 배열 [...] 이 있다
예)
{
    "속성명1": 속성값1,
    "속성명2": 속성값2,
    ...
}

2. 배열 표기
    - 항목으로 가능한 것들은 문자열, 숫자, true/false, 객체 {...}, 배열 [...] 이 있다

예)
[ 항목1, 항목2, ... ]

만약 2개 이상 속성이 있는 경우는 객체 {} 로 표기하고,
2개 이상 값이 있는 경우 배열 [] 로 표기한다
예)
{
    "id": "winter",
    "name": "한겨울",
    "age": 25,
    "student": true,
    "tel": { "home": "02-123-1234", "mobile": "010-123-1234" },
    "skill": [ "java", "c", "c++" ]
}

JSON 을 문자열로 직접 작성할 수 있지만 외부 라이브러리를 이용해 생성할 수도있다
참고(org.json 라이브러리): https://github.com/stleary/JSON-java?tab=readme-ov-file
----------------------------------------------------------------------------------------------------
<JSON 표기법 클래스>

JSONObject:
 - JSON 객체는 키(key)와 값(value) 쌍으로 이루진 비순서화(특정한 순서보장 x) 컬력션이다
 - 값의 타입으로는 Java 기본타입, String, JSONObject, JSONArray, JSONObject.null(JSON 의 null 값 표현방식)이 올 수 있다
 - JSONObject 는 Map 객체로부터 생성될 수 있음
 - get(String key), opt(String key) 메소드로부터 키에 해당하는 값을 받을 수 있다(각각 키가 없는 경우 JSONException / null 반환)
 - toString() 메소드를 통해 JSON 형식의 문자열로 변환할 수 있다
 - JSON 객체 표기를 생성하거나 파싱할 때 사용된다

JSONArray:
 - JSONArray 는 저장된 순서가 유지됨
 - 인덱스를 이용하여 값에 접근하거나 수정하는 메서드가 제공된다(인덱스는 0부터 시작)
 - Iterator(반복자)를 통해 JSONArray 의 모든 값에 순차적으로 접근 가능하다
 - JSON 배열 표기를 생성하거나 파싱할 떄 사용된다
 ----------------------------------------------------------------------------------------------------
 문자 스트림으로 JSON 파일을 만들경우, JSON 속성 순서가 보장되지 않고 줄바꿈 처리가 되지 않는다
 (줄바꿈 처리가 되지 않기 땜누에 오히려 네트워크 전송량을 줄여주므로 성능이 약간 좋아진다)
 ----------------------------------------------------------------------------------------------------
