앞에 @ 로 시작되는 요소를 어노테이션(Annotation) 이라고 한다
어노테이션은 클래스나 인터페이스를 compile 하거나 run 할 때 어떻게 처리해야할지 알려주는 설정 정보이다
즉, 어노테이션은 용도는 아래와 같다
1. 컴파일 시 사용하는 정보 전달
2. 빌드 툴이 코드를 자동으로 생성할때 사용하는 정보 전달
3. 실행 시 특정 기능을 처리할때 사용하는 정보 전달

1번의 대표적인 예로 @Override 가 있다 (컴파일러가 메소드 오버라이드 검사를 하도록 설정한다) 이것은 정확히 오버라이드가 되지 않았다면 컴파일러가 에러를 발생시킨다

<어노테이션 정의 방법>
public @interface 어노테이션이름 {}
<어노테이션 사용 방법>
@어노테이션이름
----------------------------------------------------------------------
어노테이션은 속성을 가질 수 있는데 속성은 타입, 이름 을 가질 수 있으며 이름뒤에 () 괄호를 붙인다
속성의 기본값은 default 키워드를 사용해서 설정 할 수 있다

public @interface 어노테이션이름 {
    String prop1();
    String prop2() default 1;
}

기본값이 있는 속성은 사용시 값을 생략할 수 있다 (반대로 기본값이 없는 속성은 반드시 값을 넣어줘야한다)
예)
@어노테이션이름(prop1 = "값1");
@어노테이션이름(prop1 = "값1", prop2 = 2);

기본값이 아닌 어노테이션 기본 속성으로 value() 이 있다
value 속성을 가진 어노테이션을 코드에서 사용할 때는 매개값으로 속성이름을 제외한 값만 넣을 수 있다 (이때, 값은 value 속성에 자동으로 대입됨)
만약 value 속성과 다른 속성의 값을 동시에 할당할 경우에는 value 도 속성이름을 넣어줘야한다
예) @어노테이션이름(value = "값1", prop2 = 2);
----------------------------------------------------------------------
어노테이션은 곧 설정 정보이므로 어떤 대상에 설정 정보를 적용할지(어느 클래스/인터페이스/메소드 에 설정정보를 적용할 것인지) 명시해야 한다
적용 대상의 종류는 ElementType 열거 상수로 정의되어 있다

TYPE | 클래스, 인터페이스, 열거타입
ANNOTATION_TYPE | 어노테이션
FIELD | 필드
CONSTRUCTOR | 생성자
METHOD | 메소드
LOCAL_VARIABLE | 지역변수
PACKAGE | 패키지

어노테이션의 설정 정보를 적용할 대상을 지정할 때, @Target 어노테이션을 사용한다
@Target 의 기본 속성인 value 는 ElementType 배열을 값으로 가진다 왜냐하면 여러 대상에게 지정하기 위함이다

클래스/인터페이스/열거타입, 필드, 메소드 에 적용 예시-정의)
@Target( { ElementType.TYPE, ElementType.FIELD, ElementType.METHOD } )
public @interface 어노테이션이름 {}

예시-사용)
@어노테이션이름
public class 클래스이름 {
    @어노테이션 이름
    private String 필드이름;

    @어노테이션 이름
    public void 메소드이름;
}
----------------------------------------------------------------------
어노테이션 정의시, 언제까지 어노테이션을 유지할지 RetentionPolicy 열거상수를 이용해서 지정할 수 있다

SOURCE | 컴파일할 떄 적용 | 컴파일이 완료된 후 제거됨
CLASS | 메모리에 로딩할 때 적용 | 메모리에 로딩이 완료된 후에 제거됨
RUNTIME | 실행할 떄 적용 | 계속 유지됨

유지 정채긍ㄹ 지정할때는 어노테이션 정의시 @Retention 을 사용한다
@Retention 의 기본 속성인 value 는 RetentionPolicy 열거상수 값을 가진다
예)
@Target( { ElementType.TYPE, ElementType.FIELD, ElementType.METHOD } )
@Retention( RetentionPolicy.RUNTIME)
public @interface 어노테이션이름 {}
----------------------------------------------------------------------
어노테이션은 동작을 가지지 않는 설정 정보 이다
이 설정 정보를 이용해 어떻게 처리할 것인지는 애플리케이션의 몫이다
애플리케이션은 리플렉션을 이용하여 적용 대상으로부터 어노테이션 정보를 얻어 낼 수 있다
<리플렉션의 어노테이션 정보 획득 메소드>
isAnnotationPresent(어노테이션이름.class) - 지정한 어노테이션이 적용됬는지 여부를 반환함(boolean)
getAnnotation(어노테이션이름.class) - 만약 지정한 어노테이션이 적용됬으면 그 어노테이션(Annotation)을 반환하고 그렇지 않은 경우 null 이 반환된다
getDeclaredAnnotation() - 적용된 모든 어노테이션을 반환함(Annotation[])