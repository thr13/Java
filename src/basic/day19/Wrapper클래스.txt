자바는 기본타입(Primitive type) 의 값을 갖는 객체 생성할 수 있는데 이것을 포장(Wrapper) 객체라고  한다

Wrapper 객체는 java.lang 패키지에 포함되어 있는데 char 타입과 int 타입을 제외하고 기본 타입의 첫 문자를 대문자로 바꾼 이름을 가진다 (char 타입은 Character, int 타입은 Integer)
즉, 기본타입(포장타입)은 byte(Byte), char(Character), short(Short), int(Integer), long(Long), float(Float), double(Double), boolean(Boolean) 이다

Wrapper 객체는 Primitive 타입의 값을 변경할 수 없다(객체로 생성하는데 의의가 있다)

박싱(boxing): Primitive 타입을  Wrapper 객체로 만드는 과정을 의미함
언박싱(unboxing): Wrapper 객체에서 Primitive 타입의 값을 얻어내는 과정을 의미함

박싱은 포장 클래스 변수에 기본 타입 값이 대입될 떄 발생한다 (언박싱은 기본 타입 변수에 포장 객체가 대입될 때 발생한다)
예)
Integer obj = 100; // 박싱
int value = obj; // 언박싱

언박싱은 연산과정에서 연산되기 전에 언박싱 될 수 있다
예)
int value = obj + 50; // obj 가 언박싱 을 거쳐 int 타입이 된 후 50 을 더한다

포장(Wrapper) 클래스 는 문자열을 기본 타입 값으로 변환될 때도 사용된다. 대부분의 포장 클래스는 문자열을 기본 타입 값으로 변경해주는 'parse + 기본타입' 이름을 가진 정적 메소드가 있다

포장 객체는 내부 값을 비교하기 위해 == 와 != 을 사용할 수 없다 왜냐하면 이 연산 (==, !=) 은 내부 값을 비교하는게 아니라 포장 객체의 번지(메모리 주소)를 비교하기 때문이다
단, 예외적으로 다음 값의 범위는 == 와 != 연산자로 비교할 수 있다(내부 값을 비교하는게 아니라 객체 번지를 비교하기 때문)
    - boolean 의 true, false
    - char 의 \u0000 ~ \u007f
    - byte, short, int 의 -128 ~ 127

만약 포장(Wrapper) 객체가 어떤 값이 저장될지 모르는 경우 == 와 != 를 사용하지 말고 equals() 메소드로 내부 값을 비교하는게 좋다
(Wrapper 클래스의 equals() 메소드는 내부의 값을 비교하도록 오버라이드 되어있기 때문)