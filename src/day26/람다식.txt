<함수형 프로그래밍 개념>
함수명 프로그래밍(Functional Programing)은 함수를 정의하고 이 함수를 데이터 처리부로 보내 데이터를 처리하는 기법을 의미한다
데이터 처리부는 데이터만 가지고 처리 방법이 정해져 있지 않아 외부에서 제공된 함수에 의존한다

데이터 처리부는 제공된 함수의 입력값으로 "데이터" 를 넣고 정의된 함수의 처리 내용을 실행한다
즉, 동일한 데이터라도 정의된 함수에 따라 처리하는 결과가 다를 수 있다
이게 함수형 프로그래밍 특징이다, 데이터 처리의 다형성이라고도 볼 수 있다

JAVA 는 함수형 프로그래밍을 위하 자바 8버전부터 람다식(Lambda Expressions)을 지원한다
데이터 처리부는 람다식을 받아 매개변수에 데이터를 대입하고 중괄호 { } 내부의 처리내용을 실행한다

람다식 예)
(매개변수, ...) -> { 처리 내용 }
----------------------------------------------------------------------------------------------------
<Java 에서 람다식>
Java 는 람다식을 익명 구현 객체로 변환한다

인터페이스 예)
public interface Calculable {
    // 추상 메소드
    void calculate(int x, int y);
}

인터페이스의 익명 구현 객체 예)
new Calculable() {
    @Override
    public void calculate(int x, int y) {
        // 처리내용
    }
}

위와 같은 내용을 자바에서 람다식으로 (x, y) -> { 처리내용 }; 으로 표현할 수 있다

자바에서 람다식은 인터페이스의 익명 구현 객체이므로 인터페이스 타입의 매개변수에 대입될 수 있다

예 - 익명구현객체를 매개변수로 가지는 메소드 action()
public void action(Calculable calculable) {
    int x=10;
    int y=4;
    Calculable.calculate(x, y) // 데이터를 제공하고 추상 메소드를 호출함
}

익명구현객체를 가지고 있는 action() 메소드를 호출할 때 매개값으로 람다식을 제공할 수 있다
action() 메소드의 calculable.calculate(x, y) 를 실행하면 람다식의 중괄호 블록 { 처리내용 } 이 실행되면서 데이터가 처리된다
즉, action() 메소드에 제공된 람다식을 이용해서 내부 데이터를 처리하는 처리부 역할을 할 수 있다

예) action((x, y) -> {
    int result = x + y; // 처리 내용
    System.out.println(result);
});

* 인터페이스의 익명 구현 객체를 람다식으로 표현할려면 인터페이스가 단 하나의 추상 메소드만 가져야 한다!!
** 인터페이스가 단 하나의 추상 메소드는 가진 것을 함수형 인터페이스(functional interface) 라고 한다!!
----------------------------------------------------------------------------------------------------
<함수형 인터페이스 예>
예1-인터페이스)
public interface Runnable {
    void run()
}

예2-람다식)
(매개변수) -> { 처리내용 }

예3-인터페이스 어노테이션)
@FunctionalInterface // 함수형 인터페이스를 보장하는 어노테이션 @FunctionalInterface 컴파일 과정에서 추상 메소드가 하나인지 검사한다
public interface Calculable {
    void calculate(int x, int y);
}
----------------------------------------------------------------------------------------------------
<매개변수가 없는 람다식>
함수형 인터페이스의 추상 메소드에 매개변수가 없을 경고 실행문이 하나일 경우 중괄호를 생략할 수 있다
(단, 실행문이 2개 이상일 경우 중괄호 생략 불가능)
----------------------------------------------------------------------------------------------------
<매개변수가 있는 람다식>
함수형 인터페이스의 추상 메소드에 매개변수가 있을 경우,
매개변수를 선언할 때 타입을 생략하거나 구체적인 타입 대신에 var 을 사용할 수 있다 (일반적으로 타입을 생략하고 작성함)
* 여기서도 실행문이 1개일 경우 중괄호 생략 가능

(타입 매개변수, ...) -> { 실행문1; 실행문2; }
(타입 매개변수, ...) -> 실행문1;

(var 매개변수, ...) -> { 실행문1; 실행문2 }
(var 매개변수, ...) -> 실행문1;

(매개변수, ...) -> { 실행문1; 실행문2 }
(매개변수, ...) -> 실행문1;

** 만약 매개변수가 하나일 경우 괄호() 도 생략할 수 있다 단, 이때는 타입 또는 var 를 매개변수 앞에 붙일 수 없다
매개변수 -> { 실행문1; 실행문2; }
매개변수 -> 실행문1;
----------------------------------------------------------------------------------------------------
<반환값이 존재하는 람다식>
함수형 인터페이스(추상 메소드가 1개인 인터페이스)의 추상 메소드에 리턴값이 존재할 경우 람다식은 아래와 같다

(매개변수, ...) -> {
    실행문;
    return 값;
}

* 실행문이 return 문 하나만 존재할경우 중괄호 {} 와 return 키워드를 생략할 수 있다 이때, 리턴값은 연산식 또는 리턴값 있는 메소드 호출로 대체할 수 있다
(매개변수, ...) -> 값
----------------------------------------------------------------------------------------------------
<메소드 참조>
람다식에서 불필요한 매개변수를 제거하기 위해서, 메소드를 참조해 매개변수의 정보 및 리턴 타입을 알아내는 것을 목적으로 한다

예-두 개의 값을 받아 큰 수를 리턴하는 Math 클래스의 max() 정적 메소드를 호출 하는 람다식)
(left, right) -> Math.max(left, right);

이떄 람다식은 단순히 두 개의 값을 Math.max() 메솓의 매개값으로 전달하는 역할만 한다
이것을 메소드 참조를 이용하면 Math :: max 로 깔끔하게 표현할 수 있다

즉, 클래스 :: 메소드 로 표현된다
만약 인스턴스 메소드일 경우 먼저 객체를 생성(new 연산자 사용)한 다음 참조 변수 뒤에 :: 기호를 붙이고 인스턴스 메소드 이름을 기술한다
----------------------------------------------------------------------------------------------------
<매개변수의 메소드 참조>
람다식에서 제공되는 매개변수 a 의 메소드를 호출해서 매개변수 b 를 매개값으로 사용하는 경우 표현방법은 아래와 같다
(a, b) -> { a.instanceMethod(b); }
a의 클래스 :: instanceMethod
----------------------------------------------------------------------------------------------------
<매개변수의 생성자 참조>
생성자 참조 == 객체 생성
람다식이 단순히 객체를 생성하고 반환하도록 구성된다면 람다식을 생성자 참조로 대치할 수 있다

(a, b) -> { return new 클래스(a, b); }
클래스 :: new

만약 생성자가 오버로딩 되어 여러 개가 존재할 경우 컴파일러는 함수형 인터페이스의 추상 메소드와 동일한 매개변수 타입과 개수를 가지고 있는 생성자를 찾아서 실행한다
(해당 생정자가 존재하지 않으면 컴파일 오류 발생)
----------------------------------------------------------------------------------------------------
