일반적으로 병렬작업처리 수가 많아지면 스레드의 개수가 증가하고 cpu, 메모리 사용량이 늘어나며 애플리케이션 성능이 급격히 저하된다

이런 병렬 작업 증가로 인해 늘어난 스레드를 관리할려면 스레드풀(ThreadPool)을 사용하는게 효율적이다

스레드풀(ThreadPool)은 작업처리에 사용되는 스레드의 갯수를 제한시켜놓고
작업 큐(Queue)에 들어오는 각각의 작업을 스레드가 하나씩 맡아서 처리하는 방식이다

작업 처리가 끝난 스레드는 다시, 작업 큐에서 새로운 작업을 가져와서 처리한다
이렇게 하나씩 작업을 처리할 경우, 작업량이 증가해도 스레드의 개수가 늘어나지 않기 떄문에 애플리케이션 성능 저하를 막을 수 있다
----------------------------------------------------------------------
<스레드풀 생성>
JAVA 에서 java.util.concurrent 패키지에서 ExecutorService 인터페이스와 Executors 클래스가 제공된다
Executors 클래스의 newCachedThreadPool(), newFixedThreadPool(int nThreads) 메소드를 이용해서 스레드풀을 간단하게 생성할 수 있다

* 초기수 : 스레드풀이 생성될때 기본적으로 생성되는 스레드수
** 코어수 : 스레드가 증가된 후, 사용되지 않는 스레드 제거시,스레드풀에서 최소한으로 유지하는 스레드 수
*** 최대수 : 증가될 수 있는 스레드의 한도 수
메소드명 | 초기수 | 코어수 | 최대수
newCachedThreadPool() | 0 | 0 | Integer.Max_VALUE
newFixedThreadPool() | 0 | 생성된 수 | nThreads

또는 ThreadPoolExecutor 로 직접 스레드풀을 생성할 수 있다
예)
ExecutorService threadPool = new ThreadPoolExecutor(
3, // 코어 스레드 개수
100, // 최대 스레드 개수
120L, // 놀고 있는 시간(이후 해당 스레드는 스레드풀에서 제거)
TimeUnit.SECONDS, // 놀고 있는 시간 단위
new SynchronousQueue<Runnable>() // 작업 큐
);
----------------------------------------------------------------------
<스레드풀 종료>
스레드풀의 스레드는 기본적으로 데몬 스레드가 아니므로 main 스레드가 종료되도 작업을 처리하기 위해 계속 실행(RUNNING) 상태로 남아 있다
스레드풀의 모든 스레드를 종료하기위해서는 ExecutorService 의 shutdown() 또는 shutdownNow() 메소드를 실행해야한다

shutdown() 메소드는 현재 처리 중인 작업(스레드)뿐만 아니라 작업 큐에 대기하고 있는 모든 작업을 처리한 후, 스레드풀을 종료
shutdownNow() 메소드는 현재 작업 중인 스레드를 interrupt 해서 작업을 중지시키고 스레드 풀을 종료한다 이후 반환값은 작업 큐에 처리되지 않는 작업 목록들이 List<Runnable> 로 반환된다

그러므로 남아있는 작업을 마무리하고 스레드풀을 종료할려면 shutdown() 메소드를 호출하고
남아있는 작업과는 상관없이 강제로 종료할려면 shutdownNow() 메소드를 호출하면 된다
----------------------------------------------------------------------
 <작업처리요청>
 Runnable 익명 구현 객체의 run() 메소드는 반환값이 없지만
 Callable 익명 구현 객체의 call() 메소드는 반환형이 타입파라미터로 존재한다

 Callable 예)
 new Callable<T>() {
    @Override
    public T call() throws Exception {
        // 스레드가 처리할 내용
        return T;
    }
 }

* 작업 처리 요청이란 ExecutorService 의 작업 큐에 Runnable 또는 Callable 객체를 넣는 행위를 의미한다
execute(Runnable command)는 Runnable 을 작업 큐에 저장하고 작업 처리 결과를 반환하지 않는다
submit(Callable<T> task)는 Callable 를 작업 큐에 저장하고 작업 처리 결과를 얻을 수 있도록 Future<T> 를 반환함

ExecutorService 작업 큐에 Runnable/Callable 객체가 들어가면
ExecutorService 는 처리할 스레드가 있는지 확인하고 없다면 스레드를 새로 생성한다
스레드는 작업 큐에서 Runnable/Callable 객체를 꺼내와 run()/call() 메소드를 실행하면서 작업을 처리함

