new 를 이용하여 스레드 객체를 생성하고 start() 메소드를 호출할경우, 스레드는 바로 실행 상태에 들어가는게 아니라
실행대기상태(RUNNABLE)이 된다 실행대기상태(RUNNABLE)은 실행(RUN)을 기다리고 있는 상태를 의미한다

RUNNABLE 상태인 스레드는 CPU 스케쥴링에 따라 CPU(자원)를 점유하고 run() 메소드를 실행한다
이때 스레드의 상태를 실행(RUNNING)상태 라고 부른다

실행(RUNNING) 상태인 스레드는 run() 메소드를 모두 실행하기 전, 스케줄링에 의해 다시 실행대기상태(RUNNABLE)로 돌아갈 수 있다
그리고 다른 스레드가 실행(RUNNING) 상태가 된다

스레드는 실행대기(RUNNABLE) 상태와 실행(RUNNING) 상태르 번갈아 가면서 자신의 run() 메소드를 조금씩 실행한다
실행상태(RUNNING) 에서 run() 메소드가 종료되된 경우, 더이상 실행할 코드가 없기 때문에 스레드의 실행은 멈추게 된다
이 상태를 종료 상태(TERMINATED) 라고 한다

실행(RUNNING) 상태에서 일시정지 상태가 된 경우는 스레드가 실행할 수 없는 상태를 의미한다
그리고 이 일시정지 상태인 스레드가 다시 실행(RUNNING) 상태로 가기 위해선 실행대기상태(RUNNABLE)로 가야한다
----------------------------------------------------------------------
1. 일시정지 상태로 만드는 메소드
sleep(long millis) - 주어진 시간동안 스레드를 일시정지 상태로 만든다 시간이 지난 이후 자동으로 실행대기상태가 된다
join() - 호출한 스레드를 이릿정지 상태로 만듦 이후 실행대기상태가 되려면 join() 메소드를 가진 스레드가 종료되어야한다
wait() - 동기화 블록 내 스레드를 일시 정지 상태로 만든다

2. 일시정지 상태에서 벗어나는 메소드
interrupt() - 일시정지상태 인 경우, InterruptException 예외를 발생시켜 실행대기상태 나 종료 상태로 만듦
notify() 또는 notifyAll() - wait() 메소드로 인해 일시정지상태가 된 스레드를 다시 실행대기상태로 만든다

3. 실행대기상태로 보내는 메소드
yield() - RUNNING 상태에서 다른 스레드에게 실행을 양보하고 자신은 실행대기상태가 된다
----------------------------------------------------------------------
wait(), notify(), notifyAll() 은 Object 클래스의 메소드
sleep(), join(), interrupt(), yield() 는 Thread 클래스의 메소드